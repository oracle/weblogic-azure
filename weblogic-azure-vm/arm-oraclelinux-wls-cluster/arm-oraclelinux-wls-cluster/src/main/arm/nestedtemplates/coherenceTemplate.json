{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "_artifactsLocation": {
            "type": "string",
            "metadata": {
                "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
            }
        },
        "_artifactsLocationCoherenceTemplate": {
            "defaultValue": "[if(contains(parameters('_artifactsLocation'), 'githubusercontent'), parameters('_artifactsLocation'), deployment().properties.templateLink.uri)]",
            "type": "string",
            "metadata": {
                "description": "If we are deploying from the command line, use the passed in _artifactsLocation, otherwise use the default."
            }
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "metadata": {
                "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
            },
            "defaultValue": ""
        },
        "_globalResourceNameSuffix":{
            "type": "string",
            "metadata": {
                "description": "The suffix to be appended to the globally unique resource name"
            }
        },
        "adminPasswordOrKey": {
            "type": "securestring",
            "metadata": {
                "description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
            }
        },
        "adminUsername": {
            "type": "string",
            "defaultValue": "weblogic",
            "metadata": {
                "description": "User name for the Virtual Machine."
            }
        },
        "adminVMName": {
            "defaultValue": "adminVM",
            "type": "string",
            "metadata": {
                "description": "Virtual machine name of which hosts WebLogic Administration Server."
            }
        },
        "authenticationType": {
            "type": "string",
            "defaultValue": "password",
            "allowedValues": [
                "sshPublicKey",
                "password"
            ],
            "metadata": {
                "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
            }
        },
        "dnsLabelPrefix": {
            "type": "string",
            "defaultValue": "wls",
            "metadata": {
                "description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
            }
        },        
        "enableCoherenceWebLocalStorage": {
            "defaultValue": true,
            "type": "bool",
            "metadata": {
                "description": "Specifies whether Local Storage is enabled for the Coherence*Web cluster tier."
            }
        },
        "location": {
            "type": "string",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "managedServerPrefix": {
            "type": "string",
            "defaultValue": "msp",
            "metadata": {
                "description": "Provide managed server prefix name"
            }
        },
        "managedVMNamePrefix": {
            "type": "string",
            "metadata": {
                "description": "Managed VM name prefix"
            }
        },
        "numberOfCoherenceCacheInstances": {
            "defaultValue": 1,
            "type": "int",
            "minValue": 1,
            "maxValue": 10,
            "metadata": {
                "description": "Number of Coherence cache instances, used to create Virtual Machines and Managed Server."
            }
        },
        "skuUrnVersion": {
           "type": "string",
           "defaultValue": "owls-141100-jdk11-ol91;Oracle:weblogic-141100-jdk11-ol91:owls-141100-jdk11-ol91;latest",
           "allowedValues": [
              "owls-141100-jdk11-ol91;Oracle:weblogic-141100-jdk11-ol91:owls-141100-jdk11-ol91;latest",
              "owls-141100-jdk11-ol87;Oracle:weblogic-141100-jdk11-ol87:owls-141100-jdk11-ol87;latest",
              "owls-141100-jdk8-ol91;Oracle:weblogic-141100-jdk8-ol91:owls-141100-jdk8-ol91;latest",
              "owls-141100-jdk8-ol87;Oracle:weblogic-141100-jdk8-ol87:owls-141100-jdk8-ol87;latest",
              "owls-122140-jdk8-ol91;Oracle:weblogic-122140-jdk8-ol91:owls-122140-jdk8-ol91;latest",
              "owls-122140-jdk8-ol87;Oracle:weblogic-122140-jdk8-ol87:owls-122140-jdk8-ol87;latest",
              "owls-122140-jdk8-ol76;Oracle:weblogic-122140-jdk8-ol76:owls-122140-jdk8-ol7;latest",
              "owls-141100-jdk8-ol76;Oracle:weblogic-141100-jdk8-ol76:owls-141100-jdk8-ol7;latest",
              "owls-141100-jdk11-ol76;Oracle:weblogic-141100-jdk11-ol76:owls-141100-jdk11-ol7;latest",
              "owls-141100-jdk11-rhel87;Oracle:weblogic-141100-jdk11-rhel87:owls-141100-jdk11-rhel87;latest",
              "owls-141100-jdk8-rhel87;Oracle:weblogic-141100-jdk8-rhel87:owls-141100-jdk8-rhel87;latest",
              "owls-122140-jdk8-rhel87;Oracle:weblogic-122140-jdk8-rhel87:owls-122140-jdk8-rhel87;latest",
              "owls-122140-jdk8-rhel76;Oracle:weblogic-122140-jdk8-rhel76:owls-122140-jdk8-rhel76;latest",
              "owls-141100-jdk8-rhel76;Oracle:weblogic-141100-jdk8-rhel76:owls-141100-jdk8-rhel76;latest",
              "owls-141100-jdk11-rhel76;Oracle:weblogic-141100-jdk11-rhel76:owls-141100-jdk11-rhel76;latest"
           ],
           "metadata": {
              "description": "The Oracle Linux image with Weblogic and Java preinstalled. Semicolon separated string of Sku, URN, and Version"
           }
        },
        "storageAccountName": {
            "type": "string",
            "metadata": {
                "description": "Name of storage account. One storage account can store 20 vitual machines with 2 VHDs of 500 IOPS."
            }
        },
        "subnetName": {
            "type": "string",
            "defaultValue": "wls-subnet",
            "metadata": {
               "description": "Name of the existing or new Subnet"
            }
        },
        "tagsByResource": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "${label.tagsLabel}"
            }
        },
        "usePreviewImage": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Bool value, if it's set to true, will deploy with preview weblogic image."
            }
        },
        "vmSizeSelectForCoherence": {
            "defaultValue": "Standard_A3",
            "type": "string",
            "metadata": {
                "description": "Select appropriate VM Size for Coherence cache server"
            }
        },
        "virtualNetworkResourceGroupName": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Resource group of Virtual network"
            }
        },
        "virtualNetworkName": {
            "type": "string",
            "defaultValue": "wls-vnet",
            "metadata": {
                "description": "Name of the existing or new VNET"
            }
        },
        "wlsDomainName": {
            "type": "string",
            "defaultValue": "wlsd",
            "metadata": {
                "description": "Provide Weblogic domain name"
            }
        },
        "wlsPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for your Weblogic domain name"
            }
        },
        "wlsUserName": {
            "defaultValue": "weblogic",
            "type": "string",
            "metadata": {
                "description": "Username for your Weblogic domain name"
            }
        },
        "enableDNSConfiguration": {
            "defaultValue": false,
            "type": "bool",
            "metadata": {
                "description": "Boolean value indicating, if DNS Zone Configuration is enabled or not"
            }
        },
        "customDNSNameForAdminServer": {
            "type": "string",
            "defaultValue": "none",
            "metadata": {
                "description": "Custom DNS Name for WebLogic Admin Server"
            }
        },
        "enableCustomSSL":{
            "defaultValue":false,
            "type": "bool",
            "metadata": {
               "description": "Boolean value indicating, if custom SSL is enabled or not"
            }
        },
        "sslCustomIdentityKeyStoreData": {
            "type": "securestring",
            "defaultValue":"",
            "metadata": {
                "description": "Weblogic Custom Identity Keystore Data"
            }
        },
        "sslCustomIdentityKeyStorePassPhrase": {
            "type": "securestring",
            "defaultValue":"",
            "metadata": {
                "description": "Weblogic Custom Identity Keystore Passphrase"
            }
        },
        "sslCustomIdentityKeyStoreType": {
            "type": "string",
            "metadata": {
                "description": "Weblogic Custom Identity Keystore Type"
            },
            "defaultValue": "JKS"
        },
        "sslCustomTrustKeyStoreData": {
            "type": "securestring",
            "defaultValue":"",
            "metadata": {
                "description": "Weblogic Custom Trust Store Data"
            }
        },
        "sslCustomTrustKeyStorePassPhrase": {
            "type": "securestring",
            "defaultValue":"",
            "metadata": {
                "description": "Weblogic Custom Trust Store Passphrase"
            }
        },
        "sslCustomTrustKeyStoreType": {
            "type": "string",
            "metadata": {
                "description": "Weblogic Custom Trust Store Type"
            },
            "defaultValue": "JKS"
        },
        "sslPrivateKeyAlias": {
            "type": "string",
            "defaultValue":"null",
            "metadata": {
                "description": "Weblogic Server Private Key Alias"
            }
        },
        "sslPrivateKeyPassPhrase": {
            "type": "securestring",
            "defaultValue":"",
            "metadata": {
                "description": "Weblogic Server Private Key Pass Phrase"
            }
        }
    },
    "variables": {
        "const_hyphen": "-",
        "const_imageOffer": "[concat('weblogic',variables('const_hyphen'), split(variables('name_linuxImageOfferSKU'),variables('const_hyphen'))[1],variables('const_hyphen'),split(variables('name_linuxImageOfferSKU'),variables('const_hyphen'))[2],variables('const_hyphen'),split(variables('name_linuxImageOfferSKU'),variables('const_hyphen'))[3],if(parameters('usePreviewImage'),'-preview',''))]",
        "const_imagePublisher": "oracle",
        "const_linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
                "publicKeys": [
                    {
                        "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                        "keyData": "[parameters('adminPasswordOrKey')]"
                    }
                ]
            }
        },
        "const_mountPointPath": "[concat('/mnt/', variables('name_share'))]",
        "const_publicIPAddressType": "Dynamic",
        "const_vmSize": "[parameters('vmSizeSelectForCoherence')]",
        "const_wlsDomainPath": "/u01/domains",
        "const_wlsHome": "/u01/app/wls/install/oracle/middleware/oracle_home",
        "name_linuxImageOfferSKU": "[first(split(parameters('skuUrnVersion'), ';'))]",
        "name_linuxImageVersion": "[last(split(parameters('skuUrnVersion'),';'))]",
        "name_nic": "_NIC",
        "name_publicIPAddress": "_PublicIP",
        "name_scriptFile": "setupCoherence.sh",
        "name_share": "wlsshare",
        "name_subnet": "[parameters('subnetName')]",
        "name_virtualNetwork": "[parameters('virtualNetworkName')]",
        "name_vmPrefix": "[concat(parameters('managedVMNamePrefix'), 'StorageVM')]",
        "name_wlsServerPrefix": "[concat(parameters('managedServerPrefix'),'Storage')]",
        "ref_subnet": "[resourceId(parameters('virtualNetworkResourceGroupName'),'Microsoft.Network/virtualNetworks/subnets', variables('name_virtualNetwork'), variables('name_subnet'))]",
        "name_customHostnameGeneratorscriptFile": "generateCustomHostNameVerifier.sh",
        "name_customHostnameVerifierJavaFile": "src/main/java/WebLogicCustomHostNameVerifier.java",
        "name_customHostnameValuesTemplate": "src/main/java/HostNameValuesTemplate.txt",
        "name_customHostnameVerifierTest" : "src/test/java/WebLogicCustomHostNameVerifierTest.java"
    },
    "functions": [
        {
            "namespace": "array",
            "members": {
                "join": {
                    "parameters": [
                        {
                            "name": "items",
                            "type": "array"
                        }
                    ],
                    "output": {
                        "type": "string",
                        "value": "[replace(replace(replace(string(parameters('items')), '[\"', ''), '\"]', ''), '\",\"', ',')]"
                    }
                }
            }
        }
    ],
    "resources": [
        {
            "apiVersion": "${azure.apiVersionForDeployment}",
            "name": "${cluster.coherence.start}",
            "type": "Microsoft.Resources/deployments",
            "tags": "[parameters('tagsByResource')['${identifier.resourcesDeployment}']]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        {
            "apiVersion": "${azure.apiVersionForPublicIPAddresses}",
            "type": "Microsoft.Network/publicIPAddresses",
            "tags": "[parameters('tagsByResource')['${identifier.publicIPAddresses}']]",
            "name": "[concat(variables('name_vmPrefix'),copyIndex(1),variables('name_publicIPAddress'))]",
            "location": "[parameters('location')]",
            "copy": {
                "name": "publicIPLoop",
                "count": "[parameters('numberOfCoherenceCacheInstances')]"
            },
            "properties": {
                "publicIPAllocationMethod": "[variables('const_publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[take(concat(toLower(parameters('dnsLabelPrefix')), 'co', copyindex(),'-', parameters('_globalResourceNameSuffix'),'-',toLower(parameters('wlsDomainName'))), 50)]"
                }
            }
        },
        {
            "apiVersion": "${azure.apiVersionForVirtualNetworks}",
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "name": "[concat(variables('name_virtualNetwork'), '/', variables('name_subnet'))]",
            "condition": "[and(empty(variables('name_virtualNetwork')), empty(variables('name_subnet')))]"
        },
        {
            "apiVersion": "${azure.apiVersionForNetworkInterfaces}",
            "type": "Microsoft.Network/networkInterfaces",
            "tags": "[parameters('tagsByResource')['${identifier.networkInterfaces}']]",
            "name": "[concat(variables('name_vmPrefix'), copyIndex(1), variables('name_nic'))]",
            "location": "[parameters('location')]",
            "copy": {
                "name": "nicLoop",
                "count": "[parameters('numberOfCoherenceCacheInstances')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses/', concat(variables('name_vmPrefix'),copyIndex(1),variables('name_publicIPAddress')))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat(variables('name_vmPrefix'),copyIndex(1),variables('name_publicIPAddress')))]"
                            },
                            "subnet": {
                                "id": "[variables('ref_subnet')]"
                            }
                        }
                    }
                ],
                "dnsSettings": {
                    "internalDnsNameLabel": "[concat(variables('name_vmPrefix'), copyIndex(1))]"
                }
            }
        },
        {
            "apiVersion": "${azure.apiVersionForVirtualMachines}",
            "type": "Microsoft.Compute/virtualMachines",
            "tags": "[parameters('tagsByResource')['${identifier.virtualMachines}']]",
            "name": "[concat(variables('name_vmPrefix'), copyIndex(1))]",
            "location": "[parameters('location')]",
            "copy": {
                "name": "virtualMachineLoop",
                "count": "[parameters('numberOfCoherenceCacheInstances')]"
            },
            "dependsOn": [
                "nicLoop"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('const_vmSize')]"
                },
                "osProfile": {
                    "computerName": "[concat(variables('name_vmPrefix'), copyIndex(1))]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPasswordOrKey')]",
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('const_linuxConfiguration'))]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('const_imagePublisher')]",
                        "offer": "[variables('const_imageOffer')]",
                        "sku": "[variables('name_linuxImageOfferSKU')]",
                        "version": "[variables('name_linuxImageVersion')]"
                    },
                    "osDisk": {
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "Standard_LRS"
                        }
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('name_vmPrefix'), copyIndex(1), variables('name_nic')))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', parameters('storageAccountName')), '${azure.apiVersionForStorage}').primaryEndpoints.blob]"
                    }
                }
            },
            "plan": {
                "name": "[variables('name_linuxImageOfferSKU')]",
                "publisher": "[variables('const_imagePublisher')]",
                "product": "[variables('const_imageOffer')]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "tags": "[parameters('tagsByResource')['${identifier.virtualMachinesExtensions}']]",
            "name": "[if(equals(copyIndex(),0),concat(parameters('adminVMName'),'/newuserscript'),concat(variables('name_vmPrefix'), copyIndex(),'/newuserscript'))]",
            "apiVersion": "${azure.apiVersionForVirtualMachines}",
            "location": "[parameters('location')]",
            "copy": {
                "name": "virtualMachineExtensionLoop",
                "count": "[add(parameters('numberOfCoherenceCacheInstances'),1)]"
            },
            "dependsOn": [
                "virtualMachineLoop"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[uri(parameters('_artifactsLocationCoherenceTemplate'), concat('../scripts/', variables('name_scriptFile'), parameters('_artifactsLocationSasToken')))]",
                        "[uri(parameters('_artifactsLocationCoherenceTemplate'), concat('../../../../../utilities/custom-hostname-verifier/', variables('name_customHostnameGeneratorscriptFile'), parameters('_artifactsLocationSasToken')))]",
                        "[uri(parameters('_artifactsLocationCoherenceTemplate'), concat('../../../../../utilities/custom-hostname-verifier/', variables('name_customHostnameVerifierJavaFile'), parameters('_artifactsLocationSasToken')))]",
                        "[uri(parameters('_artifactsLocationCoherenceTemplate'), concat('../../../../../utilities/custom-hostname-verifier/', variables('name_customHostnameValuesTemplate'), parameters('_artifactsLocationSasToken')))]",
                        "[uri(parameters('_artifactsLocationCoherenceTemplate'), concat('../../../../../utilities/custom-hostname-verifier/', variables('name_customHostnameVerifierTest'), parameters('_artifactsLocationSasToken')))]"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[concat('sh',' ',variables('name_scriptFile'), ' <<< \"', parameters('wlsDomainName'),' ',parameters('wlsUserName'),' ',parameters('wlsPassword'),' ', parameters('adminVMName'),' ',variables('const_wlsHome'),' ',variables('const_wlsDomainPath'),' ', parameters('storageAccountName'),' ',listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '${azure.apiVersionForStorage}').keys[0].value,' ', variables('const_mountPointPath'),' ', parameters('enableCoherenceWebLocalStorage'),' ',variables('name_wlsServerPrefix'),' ',copyIndex(),' ',if(parameters('enableDNSConfiguration'),parameters('customDNSNameForAdminServer'),parameters('adminVMName')),' ',parameters('dnsLabelPrefix'),' ',parameters('location'),' ','False',' ',string(parameters('enableCustomSSL')),' ',base64(parameters('sslCustomIdentityKeyStoreData')),' ',base64(parameters('sslCustomIdentityKeyStorePassPhrase')),' ',base64(parameters('sslCustomIdentityKeyStoreType')),' ',base64(parameters('sslCustomTrustKeyStoreData')),' ',base64(parameters('sslCustomTrustKeyStorePassPhrase')),' ',base64(parameters('sslCustomTrustKeyStoreType')),' ',base64(parameters('sslPrivateKeyAlias')),' ',base64(parameters('sslPrivateKeyPassPhrase')),'\"')]"
                }
            }
        },
        {
            "apiVersion": "${azure.apiVersionForDeployment}",
            "name": "${cluster.coherence.end}",
            "type": "Microsoft.Resources/deployments",
            "tags": "[parameters('tagsByResource')['${identifier.resourcesDeployment}']]",
            "dependsOn": [
                "virtualMachineExtensionLoop"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        }
    ],
    "outputs": {
        "artifactsLocationPassedIn": {
            "type": "string",
            "value": "[parameters('_artifactsLocation')]"
        }
    }
}
