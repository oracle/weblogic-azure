{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "_artifactsLocation": {
            "type": "string",
            "metadata": {
                "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
            }
        },
        "_artifactsLocationClusterTemplate": {
            "defaultValue": "[if(contains(parameters('_artifactsLocation'), 'githubusercontent'), parameters('_artifactsLocation'), deployment().properties.templateLink.uri)]",
            "type": "string",
            "metadata": {
                "description": "If we are deploying from the command line, use the passed in _artifactsLocation, otherwise use the default."
            }
        },
        "_artifactsLocationSasToken": {
            "defaultValue": "",
            "type": "securestring",
            "metadata": {
                "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
            }
        },
        "adminPasswordOrKey": {
            "type": "securestring",
            "metadata": {
                "description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
            }
        },
        "adminUsername": {
            "defaultValue": "weblogic",
            "type": "string",
            "metadata": {
                "description": "User name for the Virtual Machine."
            }
        },
        "adminVMName": {
            "defaultValue": "adminVM",
            "type": "string",
            "metadata": {
                "description": "Admin Server hosting VM name."
            }
        },
        "authenticationType": {
            "defaultValue": "password",
            "type": "string",
            "allowedValues": [
                "sshPublicKey",
                "password"
            ],
            "metadata": {
                "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
            }
        },
        "dnsLabelPrefix": {
            "type": "string",
            "metadata": {
                "description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
            }
        },
        "guidValue": {
            "type": "string",
            "defaultValue": "[newGuid()]"
        },
        "location": {
            "type": "string",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "managedServerPrefix": {
            "type": "string",
            "defaultValue": "msp",
            "metadata": {
                "description": "Provide managed server prefix name"
            }
        },
        "numberOfInstances": {
            "type": "int",
            "defaultValue": 2,
            "minValue": 2,
            "maxValue": 5,
            "metadata": {
                "description": "Number of VMs to deploy, limit 5 since this sample is using a single storage account"
            }
        },
        "portsToExpose": {
            "type": "string",
            "defaultValue": "80,443,7001-9000",
            "metadata": {
                "description": "Ports and port ranges to expose"
            }
        },
        "skuUrnVersion": {
            "type": "string",
            "defaultValue": "owls-141100-jdk11-ol76;Oracle:weblogic-141100-jdk11-ol76:owls-141100-jdk11-ol7;latest",
            "allowedValues": [
                "owls-122130-jdk8-ol73;Oracle:weblogic-122130-jdk8-ol73:owls-122130-jdk8-ol7;latest",
                "owls-122130-jdk8-ol74;Oracle:weblogic-122130-jdk8-ol74:owls-122130-jdk8-ol7;latest",
                "owls-122140-jdk8-ol76;Oracle:weblogic-122140-jdk8-ol76:owls-122140-jdk8-ol7;latest",
                "owls-141100-jdk8-ol76;Oracle:weblogic-141100-jdk8-ol76:owls-141100-jdk8-ol7;latest",
                "owls-141100-jdk11-ol76;Oracle:weblogic-141100-jdk11-ol76:owls-141100-jdk11-ol7;latest",
                "owls-122140-jdk8-rhel76;Oracle:weblogic-122140-jdk8-rhel76:owls-122140-jdk8-rhel76;latest",
                "owls-141100-jdk8-rhel76;Oracle:weblogic-141100-jdk8-rhel76:owls-141100-jdk8-rhel76;latest",
                "owls-141100-jdk11-rhel76;Oracle:weblogic-141100-jdk11-rhel76:owls-141100-jdk11-rhel76;latest"
            ],
            "metadata": {
                "description": "The Oracle Linux image with Weblogic and Java preinstalled. Semicolon separated string of Sku, URN, and Version"
            }
        },
        "usePreviewImage": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Bool value, if it's set to true, will deploy with preview weblogic image."
            }
        },
        "useSystemAssignedManagedIdentity": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Bool value, if it's set to true, a system assigned managed identity will to be created for the VM(s)"
            }
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_A3",
            "metadata": {
                "description": "Select appropriate VM Size as per requirement"
            }
        },
                "virtualNetworkNewOrExisting": {
            "type": "string",
            "defaultValue": "new",
            "allowedValues": [
               "new",
               "existing"
            ],
            "metadata": {
               "description": "Specify whether to create a new or existing virtual network for the VM."
            }
         },
         "virtualNetworkName": {
            "type": "string",
            "defaultValue": "wls-vnet",
            "metadata": {
               "description": "Name of the existing or new VNET"
            }
         },
         "virtualNetworkResourceGroupName": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
               "description": "Resource group of Virtual network"
            }
         },
         "addressPrefixes": {
            "type": "array",
            "defaultValue": [
               "10.0.0.0/28"
            ],
            "metadata": {
               "description": "Address prefix of the VNET."
            }
         },
         "subnetName": {
            "type": "string",
            "defaultValue": "wls-subnet",
            "metadata": {
               "description": "Name of the existing or new Subnet"
            }
         },
         "subnetPrefix": {
            "type": "string",
            "defaultValue": "10.0.0.0/29",
            "metadata": {
               "description": "Address prefix of the subnet"
            }
         },
        "subnetForAppGateway": {
            "type": "string",
            "defaultValue": "appgateway-subnet",
            "metadata": {
                "description": "Name of the existing or new Subnet for Application Gateway"
            }
        },
        "subnetPrefixForAppGateway": {
            "type": "string",
            "defaultValue": "10.0.1.0/24",
            "metadata": {
                "description": "Address prefix of the subnet for Application Gateway"
            }
        },
        "wlsDomainName": {
            "type": "string",
            "metadata": {
                "description": "Provide Weblogic domain name"
            }
        },
        "wlsUserName": {
            "defaultValue": "weblogic",
            "type": "string",
            "metadata": {
                "description": "Username for your Weblogic domain name"
            }
        },
        "wlsPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for your Weblogic domain name"
            }
        },
        "enableAppGateway": {
            "defaultValue": false,
            "type": "bool",
            "metadata": {
                "description": "If true, deploy an Azure App Gateway in front of the nodes of the cluster"
            }
        },
        "enableHTTPAdminListenPort":{
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Boolean value indicating, if WebLogic Admin Server HTTP Listen Port is enabled or not"
            }
        },
        "enableDNSConfiguration": {
            "defaultValue": false,
            "type": "bool",
            "metadata": {
                "description": "Boolean value indicating, if DNS Zone Configuration is enabled or not"
            }
        },
        "customDNSNameForAdminServer": {
            "type": "string",
            "defaultValue": "none",
            "metadata": {
                "description": "Custom DNS Name for WebLogic Admin Server"
            }
        },
        "enableCustomSSL":{
            "defaultValue":true,
            "type": "bool",
            "metadata": {
               "description": "Boolean value indicating, if custom SSL is enabled or not"
            }
        },
        "keyVaultCustomIdentityKeyStoreData": {
            "type": "securestring",
            "metadata": {
                "description": "Weblogic Custom Identity Keystore Data"
            }
        },
        "keyVaultCustomIdentityKeyStorePassPhrase": {
            "type": "securestring",
            "metadata": {
                "description": "Weblogic Custom Identity Keystore Passphrase"
            }
        },
        "keyVaultCustomIdentityKeyStoreType": {
            "type": "string",
            "metadata": {
                "description": "Weblogic Custom Identity Keystore Type"
            },
            "defaultValue": "JKS"
        },
        "keyVaultCustomTrustKeyStoreData": {
            "type": "securestring",
            "metadata": {
                "description": "Weblogic Custom Trust Store Data"
            }
        },
        "keyVaultCustomTrustKeyStorePassPhrase": {
            "type": "securestring",
            "metadata": {
                "description": "Weblogic Custom Trust Store Passphrase"
            }
        },
        "keyVaultCustomTrustKeyStoreType": {
            "type": "string",
            "metadata": {
                "description": "Weblogic Custom Trust Store Type"
            },
            "defaultValue": "JKS"
        },
        "keyVaultPrivateKeyAlias": {
            "type": "string",
            "metadata": {
                "description": "Weblogic Server Private Key Alias"
            }
        },
        "keyVaultPrivateKeyPassPhrase": {
            "type": "securestring",
            "metadata": {
                "description": "Weblogic Server Private Key Pass Phrase"
            }
        }
    },
    "variables": {
        "const_addressPrefix": "[parameters('addressPrefixes')]",
        "const_appGatewaySubnetPrefix": "[parameters('subnetPrefixForAppGateway')]",
        "const_hyphen": "-",
        "const_imageOffer": "[concat('weblogic',variables('const_hyphen'), split(variables('name_linuxImageOfferSKU'),variables('const_hyphen'))[1],variables('const_hyphen'),split(variables('name_linuxImageOfferSKU'),variables('const_hyphen'))[2],variables('const_hyphen'),split(variables('name_linuxImageOfferSKU'),variables('const_hyphen'))[3],if(parameters('usePreviewImage'),'-preview',''))]",
        "const_imagePublisher": "oracle",
        "const_linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
                "publicKeys": [
                    {
                        "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                        "keyData": "[parameters('adminPasswordOrKey')]"
                    }
                ]
            }
        },
        "const_managedVMPrefix": "[concat(parameters('managedServerPrefix'),'VM')]",
        "const_mountPointPath": "[concat('/mnt/', variables('name_share'))]",
        "const_publicIPAddressType": "Dynamic",
        "const_requiredPortrange": ",65200-65535,5556",
        "const_storageAccountType": "Standard_LRS",
        "const_subnetPrefix": "[parameters('subnetPrefix')]",
        "const_vmSize": "[parameters('vmSize')]",
        "const_wlsHome": "/u01/app/wls/install/oracle/middleware/oracle_home",
        "name_appGatewaySubnet": "[parameters('subnetForAppGateway')]",
        "name_availabilitySet": "WLSCluster-AvailabilitySet",
        "name_linuxImageOfferSKU": "[first(split(parameters('skuUrnVersion'), ';'))]",
        "name_linuxImageVersion": "[last(split(parameters('skuUrnVersion'),';'))]",
        "name_networkSecurityGroup": "[concat(parameters('dnsLabelPrefix'), '-nsg')]",
        "name_nic": "_NIC",
        "name_publicIPAddress": "_PublicIP",
        "name_nic_with_pub_ip": "[concat(variables('name_nic'), '_with_pub_ip')]",
        "name_nic_without_pub_ip": "[concat(variables('name_nic'), '_without_pub_ip')]",
        "name_outputAdminHost_with_pub_ip": "[concat(parameters('adminVMName'),variables('name_publicIPAddress'))]",
        "name_outputAdminHost_without_pub_ip": "[concat(parameters('adminVMName'),variables('name_nic_without_pub_ip'))]",
        "name_privateSaEndpoint": "[concat(take(replace(parameters('guidValue'),'-',''),6),'saep')]",
        "name_scriptFile": "setupClusterDomain.sh",
        "name_share": "wlsshare",
        "name_storageAccount": "[concat(take(replace(parameters('guidValue'),'-',''),6),'olvm')]",
        "name_subnet": "[parameters('subnetName')]",
        "name_virtualNetwork": "[parameters('virtualNetworkName')]",
        "ref_fileService": "[resourceId('Microsoft.Storage/storageAccounts/fileServices', variables('name_storageAccount'), 'default')]",
        "ref_networkSecurityGroup": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('name_networkSecurityGroup'))]",
        "ref_storage": "[resourceId('Microsoft.Storage/storageAccounts', variables('name_storageAccount'))]",
        "ref_subnet": "[resourceId(parameters('virtualNetworkResourceGroupName'),'Microsoft.Network/virtualNetworks/subnets', variables('name_virtualNetwork'), variables('name_subnet'))]",
        "name_customHostnameGeneratorscriptFile": "generateCustomHostNameVerifier.sh",
        "name_customHostnameVerifierJavaFile": "src/main/java/WebLogicCustomHostNameVerifier.java",
        "name_customHostnameValuesTemplate": "src/main/java/HostNameValuesTemplate.txt",
        "name_customHostnameVerifierTest" : "src/test/java/WebLogicCustomHostNameVerifierTest.java",
        "property_subnet_with_app_gateway": [
            {
                "name": "[variables('name_subnet')]",
                "properties": {
                    "addressPrefix": "[variables('const_subnetPrefix')]",
                    "networkSecurityGroup": {
                        "id": "[variables('ref_networkSecurityGroup')]"
                    }
                }
            },
            {
                // PENDING(edburns): Assume it is acceptable to create a subnet for the App Gateway, even if the user
                // has not requested an App Gateway.  In support of this assumption we can note: the user may want an App 
                // Gateway after deployment.
                "name": "[variables('name_appGatewaySubnet')]",
                "properties": {
                    "addressPrefix": "[variables('const_appGatewaySubnetPrefix')]",
                    "networkSecurityGroup": {
                        "id": "[variables('ref_networkSecurityGroup')]"
                    }
                }
            }
        ],
        "property_subnet_without_app_gateway": [
            {
                "name": "[variables('name_subnet')]",
                "properties": {
                    "addressPrefix": "[variables('const_subnetPrefix')]",
                    "networkSecurityGroup": {
                        "id": "[variables('ref_networkSecurityGroup')]"
                    }
                }
            }
        ]
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersion}",
            "name": "${cluster.cluster.start}",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersion}",
            "name": "${cluster.ssl.start}",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        {
            "apiVersion": "${azure.apiVersionForNetworkSecurityGroups}",
            "type": "Microsoft.Network/networkSecurityGroups",
            "condition": "[equals(parameters('virtualNetworkNewOrExisting'), 'new')]",
            "name": "[variables('name_networkSecurityGroup')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "WebLogicPorts",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 320,
                            "direction": "Inbound",
                            "destinationPortRanges": "[split(concat(parameters('portsToExpose'),variables('const_requiredPortrange')), ',')]"
                        }
                    },
                    {
                        "name": "WebLogicNMPort",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "Internet",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 201,
                            "direction": "Inbound",
                            "destinationPortRanges": [ "5556" ]
                        }
                    },
                    {
                        "name": "WebLogicAdminChannelPort",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "Internet",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 202,
                            "direction": "Inbound",
                            "destinationPortRanges": [ "7005" ]
                        }
                    },
                    {
                        "name": "WebLogicManagedChannelPortsDenied",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 230,
                            "direction": "Inbound",
                            "destinationPortRanges": [
                                "8501"
                            ],
                            "sourceAddressPrefix": "Internet"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "${azure.apiVersion2}",
            "name": "[variables('name_storageAccount')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "[variables('const_storageAccountType')]"
            },
            "kind": "StorageV2",
            "properties": {
                "supportsHttpsTrafficOnly": false
            },
            "dependsOn": [
                "[variables('name_networkSecurityGroup')]"
            ]
        },
        {
            "apiVersion": "${azure.apiVersionForPrivateEndpoint}",
            "name": "[variables('name_privateSaEndpoint')]",
            "type": "Microsoft.Network/privateEndpoints",
            "location": "[parameters('location')]",
            "properties": {
                  "privateLinkServiceConnections": [
                     {
                        "name": "[variables('name_privateSaEndpoint')]",
                        "properties": {
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts/', variables('name_storageAccount'))]",
                              "groupIds": [
                                 "file"
                              ]
                        }
                     }
                  ],
                  "subnet": {
                     "id": "[variables('ref_subnet')]"
                  }
            },
            "dependsOn": [
               "[resourceId('Microsoft.Storage/storageAccounts', variables('name_storageAccount'))]",
               "[variables('name_virtualNetwork')]"
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices",
            "apiVersion": "${azure.apiVersion2}",
            "name": "[concat(variables('name_storageAccount'), '/default')]",
            "dependsOn": [
                "[variables('ref_storage')]"
            ],
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
            "apiVersion": "${azure.apiVersion2}",
            "name": "[concat(variables('name_storageAccount'), '/default/', variables('name_share'))]",
            "dependsOn": [
                "[variables('ref_fileService')]",
                "[variables('ref_storage')]"
            ],
            "properties": {
                "shareQuota": 5
            }
        },
        {
            "apiVersion": "${azure.apiVersionForPublicIPAddresses}",
            "type": "Microsoft.Network/publicIPAddresses",
            "condition": "[equals(parameters('virtualNetworkNewOrExisting'), 'new')]",
            "name": "[if(equals(copyIndex(),0),concat(parameters('adminVMName'),variables('name_publicIPAddress')),concat(variables('const_managedVMPrefix'), copyIndex(),variables('name_publicIPAddress')))]",
            "location": "[parameters('location')]",
            "copy": {
                "name": "publicIPLoop",
                "count": "[parameters('numberOfInstances')]"
            },
            "properties": {
                "publicIPAllocationMethod": "[variables('const_publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[concat(toLower(parameters('dnsLabelPrefix')),copyindex(),'-',take(replace(parameters('guidValue'),'-',''),10),'-',toLower(parameters('wlsDomainName')))]"
                }
            },
            "dependsOn": [
                "[variables('name_storageAccount')]"
            ]
        },
        {
            "apiVersion": "${azure.apiVersionForVirtualNetworks}",
            "type": "Microsoft.Network/virtualNetworks",
            "condition": "[equals(parameters('virtualNetworkNewOrExisting'), 'new')]",
            "name": "[variables('name_virtualNetwork')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[variables('name_storageAccount')]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": "[variables('const_addressPrefix')]"
                },
                "subnets": "[if(parameters('enableAppGateway'), variables('property_subnet_with_app_gateway'), variables('property_subnet_without_app_gateway'))]"

            }
        },
        {
            "apiVersion": "${azure.apiVersionForNetworkInterfaces}",
            "type": "Microsoft.Network/networkInterfaces",
            "condition": "[equals(parameters('virtualNetworkNewOrExisting'), 'new')]",
            "name": "[if(equals(copyIndex(),0),concat(parameters('adminVMName'),variables('name_nic_with_pub_ip')),concat(variables('const_managedVMPrefix'), copyIndex(),variables('name_nic_with_pub_ip')))]",            "location": "[parameters('location')]",
            "copy": {
                "name": "nicLoop_public_ip",
                "count": "[parameters('numberOfInstances')]"
            },
            "dependsOn": [
                "[variables('name_virtualNetwork')]",
                "publicIPLoop"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',if(equals(copyIndex(),0),concat(parameters('adminVMName'),variables('name_publicIPAddress')),concat(variables('const_managedVMPrefix'), copyIndex(),variables('name_publicIPAddress'))))]"
                            },
                            "subnet": {
                                "id": "[variables('ref_subnet')]"
                            }
                        }
                    }
                ],
                "dnsSettings": {
                    "internalDnsNameLabel": "[if(equals(copyIndex(),0),parameters('adminVMName'),concat(variables('const_managedVMPrefix'), copyIndex()))]"
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "${azure.apiVersionForNetworkInterfaces}",
            "condition": "[equals(parameters('virtualNetworkNewOrExisting'), 'existing')]",
            "name": "[if(equals(copyIndex(),0),variables('name_outputAdminHost_without_pub_ip'),concat(variables('const_managedVMPrefix'), copyIndex(),variables('name_nic_without_pub_ip')))]",
            "location": "[parameters('location')]",
            "copy": {
                "name": "nicLoop_private_ip",
                "count": "[parameters('numberOfInstances')]"
            },
            "dependsOn": [
                "[variables('name_virtualNetwork')]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('ref_subnet')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "apiVersion": "${azure.apiVersionForAvailabilitySets}",
            "location": "[parameters('location')]",
            "name": "[variables('name_availabilitySet')]",
            "properties": {
                "platformFaultDomainCount": 2,
                "platformUpdateDomainCount": 2
            },
            "dependsOn": [
                "[variables('name_virtualNetwork')]"
            ],
            "sku": {
                "name": "Aligned"
            }
        },
        {
            "apiVersion": "${azure.apiVersionForVirtualMachines}",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[if(equals(copyIndex(),0),parameters('adminVMName'),concat(variables('const_managedVMPrefix'), copyIndex()))]",
            "location": "[parameters('location')]",
            "copy": {
                "name": "virtualMachineLoop",
                "count": "[parameters('numberOfInstances')]"
            },
            "dependsOn": [
                "nicLoop_public_ip",
                "nicLoop_private_ip",
                "[resourceId('Microsoft.Compute/availabilitySets/', variables('name_availabilitySet'))]",
                "[variables('name_privateSaEndpoint')]"
            ],
            "identity": "[if(parameters('useSystemAssignedManagedIdentity'), json('{\"type\":\"SystemAssigned\"}'), null())]",
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('name_availabilitySet'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('const_vmSize')]"
                },
                "osProfile": {
                    "computerName": "[if(equals(copyIndex(),0),parameters('adminVMName'),concat(variables('const_managedVMPrefix'), copyIndex()))]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPasswordOrKey')]",
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('const_linuxConfiguration'))]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('const_imagePublisher')]",
                        "offer": "[variables('const_imageOffer')]",
                        "sku": "[variables('name_linuxImageOfferSKU')]",
                        "version": "[variables('name_linuxImageVersion')]"
                    },
                    "osDisk": {
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "Standard_LRS"
                        }
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[if(equals(parameters('virtualNetworkNewOrExisting'), 'new'), resourceId('Microsoft.Network/networkInterfaces',if(equals(copyIndex(),0),concat(parameters('adminVMName'),variables('name_nic_with_pub_ip')),concat(variables('const_managedVMPrefix'), copyIndex(),variables('name_nic_with_pub_ip')))), resourceId('Microsoft.Network/networkInterfaces',if(equals(copyIndex(),0),variables('name_outputAdminHost_without_pub_ip'),concat(variables('const_managedVMPrefix'), copyIndex(),variables('name_nic_without_pub_ip')))))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('name_storageAccount')), '${azure.apiVersion2}').primaryEndpoints.blob]"
                    }
                }
            },
            "plan": {
                "name": "[variables('name_linuxImageOfferSKU')]",
                "publisher": "[variables('const_imagePublisher')]",
                "product": "[variables('const_imageOffer')]"
            }
        },
        {
            "apiVersion": "${azure.apiVersionForVirtualMachines}",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[if(equals(copyIndex(),0),concat(parameters('adminVMName'),'/newuserscript'),concat(variables('const_managedVMPrefix'), copyIndex(),'/newuserscript'))]",
            "location": "[parameters('location')]",
            "copy": {
                "name": "virtualMachineExtensionLoop",
                "count": "[parameters('numberOfInstances')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/',parameters('adminVMName'))]",
                "virtualMachineLoop"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[uri(parameters('_artifactsLocationClusterTemplate'), concat('../scripts/', variables('name_scriptFile'), parameters('_artifactsLocationSasToken')))]",
                        "[uri(parameters('_artifactsLocationClusterTemplate'), concat('../../../../../utilities/custom-hostname-verifier/', variables('name_customHostnameGeneratorscriptFile'), parameters('_artifactsLocationSasToken')))]",
                        "[uri(parameters('_artifactsLocationClusterTemplate'), concat('../../../../../utilities/custom-hostname-verifier/', variables('name_customHostnameVerifierJavaFile'), parameters('_artifactsLocationSasToken')))]",
                        "[uri(parameters('_artifactsLocationClusterTemplate'), concat('../../../../../utilities/custom-hostname-verifier/', variables('name_customHostnameValuesTemplate'), parameters('_artifactsLocationSasToken')))]",
                        "[uri(parameters('_artifactsLocationClusterTemplate'), concat('../../../../../utilities/custom-hostname-verifier/', variables('name_customHostnameVerifierTest'), parameters('_artifactsLocationSasToken')))]"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[concat('sh',' ',variables('name_scriptFile'),' <<< \"',parameters('wlsDomainName'),' ',parameters('wlsUserName'),' ',parameters('wlsPassword'),' ',if(equals(copyIndex(),0),'admin',concat(parameters('managedServerPrefix'), copyIndex())),' ',parameters('adminVMName'),' ',variables('const_wlsHome'),' ',variables('name_storageAccount'),' ',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('name_storageAccount')), '${azure.apiVersion2}').keys[0].value,' ',variables('const_mountPointPath'),' ',string(parameters('enableHTTPAdminListenPort')),' ',string(parameters('enableCustomSSL')),' ',if(equals(parameters('virtualNetworkNewOrExisting'), 'new'), if(parameters('enableDNSConfiguration'),parameters('customDNSNameForAdminServer'),reference(variables('name_outputAdminHost_with_pub_ip'), '${azure.apiVersion}').dnsSettings.fqdn), reference(variables('name_outputAdminHost_without_pub_ip')).ipConfigurations[0].properties.privateIPAddress),' ',parameters('dnsLabelPrefix'),' ',parameters('location'),' ', parameters('virtualNetworkNewOrExisting'),' ',reference(resourceId('Microsoft.Network/privateEndpoints/', variables('name_privateSaEndpoint')), '${azure.apiVersionForPrivateEndpoint}').customDnsConfigs[0].ipAddresses[0],' ',base64(parameters('keyVaultCustomIdentityKeyStoreData')),' ',base64(parameters('keyVaultCustomIdentityKeyStorePassPhrase')),' ',base64(parameters('keyVaultCustomIdentityKeyStoreType')),' ',base64(parameters('keyVaultCustomTrustKeyStoreData')),' ',base64(parameters('keyVaultCustomTrustKeyStorePassPhrase')),' ',base64(parameters('keyVaultCustomTrustKeyStoreType')),' ',base64(parameters('keyVaultPrivateKeyAlias')),' ',base64(parameters('keyVaultPrivateKeyPassPhrase')),'\"')]"
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersion}",
            "name": "${cluster.ssl.end}",
            "dependsOn": [
                "virtualMachineExtensionLoop"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersion}",
            "name": "${cluster.cluster.end}",
            "dependsOn": [
                "virtualMachineExtensionLoop"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersion}",
            "name": "${from.owls-122130-jdk8-ol74}",

            "condition": "[if(contains(variables('name_linuxImageOfferSKU'), 'owls-122130-jdk8-ol74'), bool('true'), bool('false'))]",
            "dependsOn": [
                "virtualMachineExtensionLoop"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersion}",
            "name": "${from.owls-122130-jdk8-ol73}",
            "condition": "[if(contains(variables('name_linuxImageOfferSKU'), 'from.owls-122130-jdk8-ol73'), bool('true'), bool('false'))]",
            "dependsOn": [
                "virtualMachineExtensionLoop"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersion}",
            "name": "${from.owls-122140-jdk8-ol76}",

            "condition": "[if(contains(variables('name_linuxImageOfferSKU'), 'from.owls-122140-jdk8-ol76'), bool('true'), bool('false'))]",
            "dependsOn": [
                "virtualMachineExtensionLoop"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersion}",
            "name": "${from.owls-141100-jdk8-ol76}",
            "condition": "[if(contains(variables('name_linuxImageOfferSKU'), 'owls-141100-jdk8-ol76'), bool('true'), bool('false'))]",
            "dependsOn": [
                "virtualMachineExtensionLoop"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersion}",
            "name": "${from.owls-141100-jdk11-ol76}",
            "condition": "[if(contains(variables('name_linuxImageOfferSKU'), 'owls-141100-jdk11-ol76'), bool('true'), bool('false'))]",
            "dependsOn": [
                "virtualMachineExtensionLoop"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersion}",
            "name": "${from.owls-122140-jdk8-rhel76}",
            "condition": "[if(contains(variables('name_linuxImageOfferSKU'), 'owls-122140-jdk8-rhel76'), bool('true'), bool('false'))]",
            "dependsOn": [
                "virtualMachineExtensionLoop"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersion}",
            "name": "${from.owls-141100-jdk8-rhel76}",
            "condition": "[if(contains(variables('name_linuxImageOfferSKU'), 'owls-141100-jdk8-rhel76'), bool('true'), bool('false'))]",
            "dependsOn": [
                "virtualMachineExtensionLoop"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersion}",
            "name": "${from.owls-141100-jdk11-rhel76}",
            "condition": "[if(contains(variables('name_linuxImageOfferSKU'), 'owls-141100-jdk11-rhel76'), bool('true'), bool('false'))]",
            "dependsOn": [
                "virtualMachineExtensionLoop"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        }        
    ],
    "outputs": {
        "_adminPublicIPId": {
            "type": "string",
            "value": "[if(equals(parameters('virtualNetworkNewOrExisting'), 'new'),resourceId('Microsoft.Network/publicIPAddresses',concat(parameters('adminVMName'),variables('name_publicIPAddress'))),'')]"
        },
        "artifactsLocationPassedIn": {
            "type": "string",
            "value": "[parameters('_artifactsLocation')]"
        },
        "adminHostName": {
            "type": "string",
            "value": "[if(equals(parameters('virtualNetworkNewOrExisting'), 'new'), reference(variables('name_outputAdminHost_with_pub_ip'), '${azure.apiVersion}').dnsSettings.fqdn, reference(variables('name_outputAdminHost_without_pub_ip')).ipConfigurations[0].properties.privateIPAddress)]"
        },
        "adminConsole": {
            "type": "string",
            "value": "[uri(concat('http://',if(equals(parameters('virtualNetworkNewOrExisting'), 'new'),reference(variables('name_outputAdminHost_with_pub_ip'), '${azure.apiVersion}').dnsSettings.fqdn,reference(variables('name_outputAdminHost_without_pub_ip')).ipConfigurations[0].properties.privateIPAddress),':7001/console/'),'')]"
        },
        "adminSecuredConsole": {
            "type": "string",
            "value": "[uri(concat('https://',if(equals(parameters('virtualNetworkNewOrExisting'), 'new'),reference(variables('name_outputAdminHost_with_pub_ip'), '${azure.apiVersion}').dnsSettings.fqdn,reference(variables('name_outputAdminHost_without_pub_ip')).ipConfigurations[0].properties.privateIPAddress),':7002/console/'),'')]"
        },
        "wlsDomainLocation": {
            "type": "string",
            "value": "[concat('/u01/domains/', parameters('wlsDomainName'))]"
        },
        "storageAccountName": {
            "type": "string",
            "value": "[variables('name_storageAccount')]"
        }
    }
}
