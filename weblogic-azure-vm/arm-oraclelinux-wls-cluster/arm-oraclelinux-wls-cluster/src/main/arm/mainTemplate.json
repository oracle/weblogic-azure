{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "_artifactsLocation": {
            "defaultValue": "[deployment().properties.templateLink.uri]",
            "type": "string",
            "metadata": {
                "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
            }
        },
        "_artifactsLocationSasToken": {
            "defaultValue": "",
            "type": "securestring",
            "metadata": {
                "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
            }
        },        
        "adminPasswordOrKey": {
            "type": "securestring",
            "metadata": {
                "description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
            }
        },
        "adminUsername": {
            "defaultValue": "weblogic",
            "type": "string",
            "metadata": {
                "description": "User name for the Virtual Machine."
            }
        },
        "adminVMNamePrefix": {
            "defaultValue": "admin",
            "type": "string",
            "metadata": {
                "description": "Admin Server hosting VM name prefix."
            }
        },
        "appGatewayCertificateOption": {
            "defaultValue": "haveCert",
            "type": "string",
            "metadata": {
                "description": "Three scenarios we support for deploying app gateway"
            },
            "allowedValues": [
                "haveCert",
                "generateCert"
            ]
        },
        "appGatewaySSLBackendCertData": {
            "defaultValue": "",
            "type": "securestring",
            "metadata": {
                "description": "The one-line, base64 string of the SSL backend certificate data."
            }
        },
        "appGatewaySSLCertData": {
            "defaultValue": "",
            "type": "securestring",
            "metadata": {
                "description": "The one-line, base64 string of the SSL certificate data."
            }
        },
        "appGatewaySSLCertPassword": {
            "defaultValue": "",
            "type": "securestring",
            "metadata": {
                "description": "The value of the password for the SSL Certificate"
            }
        },
        "authenticationType": {
            "type": "string",
            "defaultValue": "password",
            "allowedValues": [
                "sshPublicKey",
                "password"
            ],
            "metadata": {
                "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
            }
        },
        "databaseType": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "One of the supported database types"
            }
        },
        "dbGlobalTranPro": {
            "defaultValue": "OnePhaseCommit",
            "type": "string",
            "metadata": {
                "description": "Determines the transaction protocol (global transaction processing behavior) for the data source."
            }
        },
        "dbIdentity": {
            "defaultValue": {},
            "type": "object",
            "metadata": {
                "description": "Managed identity that has access to the data source."
            }
        },
        "dbPassword": {
            "defaultValue": "",
            "type": "securestring",
            "metadata": {
                "description": "Password for Database"
            }
        },
        "dbUser": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "Userid of Database"
            }
        },
        "denyPublicTrafficForAdminServer": {
            "type": "bool",
            "defaultValue": false
        },
        "denyPublicTrafficForManagedServer": {
            "type": "bool",
            "defaultValue": false
        },
        "dsConnectionURL": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "JDBC Connection String"
            }
        },
        "dnsLabelPrefix": {
            "defaultValue": "wls",
            "type": "string",
            "metadata": {
                "description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
            }
        },
        "dnsNameforApplicationGateway": {
            "defaultValue": "wlsgw",
            "type": "string",
            "metadata": {
                "description": "DNS for ApplicationGateway"
            }
        },
        "dnszoneName": {
            "defaultValue": "contoso.xyz",
            "type": "string",
            "metadata": {
                "description": "Azure DNS Zone name."
            }
        },
        "dnszoneResourceGroup": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Name of the resource group containing the Azure DNS Zone."
            }
        },
        "dnszoneAdminConsoleLabel": {
            "type": "string",
            "defaultValue": "console",
            "metadata": {
                "description": "Specify a label used to generate subdomain of Oracle WebLogic Administration Console. The final subdomain name will be label.dnszoneName, e.g. console.contoso.xyz"
            }
        },
        "dnszoneAppGatewayLabel": {
            "type": "string",
            "defaultValue": "applications",
            "metadata": {
                "description": "Specify a label used to generate subdomain of Application Gateway. The final subdomain name will be label.dnszoneName, e.g. applications.contoso.xyz"
            }
        },
        "enableAppGateway": {
            "defaultValue": false,
            "type": "bool",
            "metadata": {
                "description": "If true, deploy an Azure App Gateway in front of the nodes of the cluster"
            }
        },
        "enableCoherence": {
            "defaultValue": false,
            "type": "bool",
            "metadata": {
                "description": "If true, create Coherence Cluster with data tier for caches."
            }
        },
        "enableCoherenceWebLocalStorage": {
            "defaultValue": true,
            "type": "bool",
            "metadata": {
                "description": "Specifies whether Local Storage is enabled for the Coherence*Web cluster tier."
            }
        },
        "enableCookieBasedAffinity": {
            "defaultValue": true,
            "type": "bool",
            "metadata": {
                "description": "true to enable cookie based affinity."
            }
        },
        "enableDB": {
            "defaultValue": false,
            "type": "bool",
            "metadata": {
                "description": "If true, use the supplied parameters to connect the cluster to a pre-provisioned database."
            }
        },
        "enableDNSConfiguration": {
            "defaultValue": false,
            "type": "bool",
            "metadata": {
                "description": "If true, use the supplied parameters to configure custome DNS."
            }
        },
        "enablePswlessConnection": {
            "defaultValue": false,
            "type": "bool",
            "metadata": {
                "description": "True to enable passwordless JDBC connection."
            }
        },
        "gatewayPublicIPAddressName": {
            "defaultValue": "gwip",
            "type": "string",
            "metadata": {
                "description": "Public IP Name for the Application Gateway"
            }
        },
        "guidValue": {
            "type": "string",
            "defaultValue": "[newGuid()]"
        },
        "hasDNSZones": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "If true, the template will update records to the existing DNS Zone. If false, the template will create a new DNS Zone."
            }
        },
        "jdbcDataSourceName": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "JNDI Name for JDBC Datasource"
            }
        },
        "keyVaultSku": {
            "defaultValue": "Standard",
            "type": "string",
            "metadata": {
                "description": "Price tier for Key Vault."
            }
        },
        "location": {
            "defaultValue": "[resourceGroup().location]",
            "type": "string",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "managedServerPrefix": {
            "defaultValue": "msp",
            "type": "string",
            "metadata": {
                "description": "Provide managed server prefix names"
            }
        },
        "numberOfInstances": {
            "defaultValue": 2,
            "type": "int",
            "minValue": 2,
            "maxValue": 5,
            "metadata": {
                "description": "Number of VMs to deploy, limit 5 since this sample is using a single storage account"
            }
        },
        "numberOfCoherenceCacheInstances": {
            "defaultValue": 1,
            "type": "int",
            "minValue": 1,
            "maxValue": 10,
            "metadata": {
                "description": "Number of Coherence cache instances, used to create Virtual Machines and Managed Server for storage."
            }
        },
        "portsToExpose": {
            "defaultValue": "80,443,7001-9000",
            "type": "string",
            "metadata": {
                "description": "Ports and port ranges to expose"
            }
        },
        "skuUrnVersion": {
            "type": "string",
            "defaultValue": "owls-141200-jdk21-ol94;Oracle:weblogic-141200-jdk21-ol94:owls-141200-jdk21-ol94;latest",
            "allowedValues": [
                "owls-141200-jdk21-ol94;Oracle:weblogic-141200-jdk21-ol94:owls-141200-jdk21-ol94;latest",
                "owls-141200-jdk21-ol810;Oracle:weblogic-141200-jdk21-ol810:owls-141200-jdk21-ol810;latest",
                "owls-141200-jdk17-ol94;Oracle:weblogic-141200-jdk17-ol94:owls-141200-jdk17-ol94;latest",
                "owls-141200-jdk17-ol810;Oracle:weblogic-141200-jdk17-ol810:owls-141200-jdk17-ol810;latest",
                "owls-141100-jdk11-ol91;Oracle:weblogic-141100-jdk11-ol91:owls-141100-jdk11-ol91;latest",
                "owls-141100-jdk11-ol87;Oracle:weblogic-141100-jdk11-ol87:owls-141100-jdk11-ol87;latest",
                "owls-141100-jdk8-ol91;Oracle:weblogic-141100-jdk8-ol91:owls-141100-jdk8-ol91;latest",
                "owls-141100-jdk8-ol87;Oracle:weblogic-141100-jdk8-ol87:owls-141100-jdk8-ol87;latest",
                "owls-122140-jdk8-ol91;Oracle:weblogic-122140-jdk8-ol91:owls-122140-jdk8-ol91;latest",
                "owls-122140-jdk8-ol87;Oracle:weblogic-122140-jdk8-ol87:owls-122140-jdk8-ol87;latest",
                "owls-141100-jdk11-rhel87;Oracle:weblogic-141100-jdk11-rhel87:owls-141100-jdk11-rhel87;latest",
                "owls-141100-jdk8-rhel87;Oracle:weblogic-141100-jdk8-rhel87:owls-141100-jdk8-rhel87;latest",
                "owls-122140-jdk8-rhel87;Oracle:weblogic-122140-jdk8-rhel87:owls-122140-jdk8-rhel87;latest"
            ],
            "metadata": {
                "description": "The Oracle Linux image with Weblogic and Java preinstalled. Semicolon separated string of Sku, URN, and Version"
            }
        },
        "tagsByResource": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "${label.tagsLabel}"
            }
        },
        "usePreviewImage": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Bool value, if it's set to true, will deploy with preview weblogic image."
            }
        },
        "useSystemAssignedManagedIdentity": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Bool value, if it's set to true, a system assigned managed identity will to be created for the VM(s)"
            }
        },
        "vmSize": {
            "defaultValue": "Standard_A3",
            "type": "string",
            "metadata": {
                "description": "Select appropriate VM Size as per requirement"
            }
        },
        "vmSizeSelectForCoherence": {
            "defaultValue": "Standard_A3",
            "type": "string",
            "metadata": {
                "description": "Select appropriate VM Size for Coherence"
            }
        },
        "virtualNetworkNewOrExisting": {
            "type": "string",
            "defaultValue": "new",
            "allowedValues": [
                "new",
                "existing"
            ],
            "metadata": {
                "description": "Specify whether to create a new or existing virtual network for the VM."
            }
        },
        "virtualNetworkName": {
            "type": "string",
            "defaultValue": "[concat('wlscluster-vnet-', uniqueString(utcNow()))]",
            "metadata": {
                "description": "Name of the existing or new VNET"
            }
        },
        "virtualNetworkResourceGroupName": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Resource group of Virtual network"
            }
        },
        "addressPrefixes": {
            "type": "array",
            "defaultValue": [
                "10.0.0.0/16"
            ],
            "metadata": {
                "description": "Address prefix of the VNET."
            }
        },
        "subnetName": {
            "type": "string",
            "defaultValue": "wls-subnet",
            "metadata": {
                "description": "Name of the existing or new Subnet"
            }
        },
        "subnetPrefix": {
            "type": "string",
            "defaultValue": "10.0.0.0/24",
            "metadata": {
                "description": "Address prefix of the subnet"
            }
        },
        "subnetForAppGateway": {
            "type": "string",
            "defaultValue": "appgateway-subnet",
            "metadata": {
                "description": "Name of the existing or new Subnet for Application Gateway"
            }
        },
        "subnetPrefixForAppGateway": {
            "type": "string",
            "defaultValue": "10.0.1.0/24",
            "metadata": {
                "description": "Address prefix of the subnet for Application Gateway"
            }
        },
        "wlsDomainName": {
            "defaultValue": "wlsd",
            "type": "string",
            "metadata": {
                "description": "Provide Weblogic domain name"
            }
        },
        "wlsUserName": {
            "defaultValue": "weblogic",
            "type": "string",
            "metadata": {
                "description": "Username for your Weblogic domain name"
            }
        },
        "wlsPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for your Weblogic domain name"
            }
        },
        "enableHTTPAdminListenPort": {
            "defaultValue": true,
            "type": "bool",
            "metadata": {
                "description": "Boolean value indicating, if WebLogic Admin Server HTTP Listen Port is enabled or not"
            }
        },
        "enableCustomSSL": {
            "defaultValue": false,
            "type": "bool",
            "metadata": {
                "description": "Boolean value indicating, if custom SSL is enabled or not"
            }
        },
        "uploadedCustomIdentityKeyStoreData": {
            "type": "string",
            "metadata": {
                "description": "Custom Identity KeyStore Data"
            },
            "defaultValue": "customIdentityKeyStoreData"
        },
        "uploadedCustomIdentityKeyStorePassphrase": {
            "type": "securestring",
            "metadata": {
                "description": "Custom Identity KeyStore Passphrase"
            },
            "defaultValue": ""
        },
        "uploadedCustomIdentityKeyStoreType": {
            "type": "string",
            "metadata": {
                "description": "Weblogic Custom Identity Keystore Type"
            },
            "defaultValue": "JKS"
        },
        "uploadedCustomTrustKeyStoreData": {
            "type": "string",
            "metadata": {
                "description": "Custom Trust KeyStore Data"
            },
            "defaultValue": "customTrustKeyStoreData"
        },
        "uploadedCustomTrustKeyStorePassPhrase": {
            "type": "securestring",
            "metadata": {
                "description": "Custom Trust KeyStore PassPhrase"
            },
            "defaultValue": ""
        },
        "uploadedCustomTrustKeyStoreType": {
            "type": "string",
            "metadata": {
                "description": "Weblogic Custom Trust Keystore Type"
            },
            "defaultValue": "JKS"
        },
        "uploadedPrivateKeyAlias": {
            "type": "string",
            "metadata": {
                "description": "Alias of the private key"
            },
            "defaultValue": "privateKeyAlias"
        },
        "uploadedPrivateKeyPassPhrase": {
            "type": "securestring",
            "metadata": {
                "description": "Password of the private key"
            },
            "defaultValue": ""
        }
    },
    "variables": {
        "const_appGatewaySSLCertOptionGenerateCert": "generateCert",
        "const_azureSubjectName": "[format('{0}.{1}.{2}', variables('name_domainLabelforApplicationGateway'), parameters('location'),'cloudapp.azure.com')]",
        "const_globalResourceNameSuffix": "[uniqueString(parameters('guidValue'))]",
        "const_vmSize": "[parameters('vmSize')]",
        "const_vmSizeCoherence": "[parameters('vmSizeSelectForCoherence')]",
        "name_adminVM": "[concat(parameters('adminVMNamePrefix'), variables('const_globalResourceNameSuffix'), 'VM')]",
        "name_appGatewayConnector": "_appGatewayConnectorTemplate.json",
        "name_clusterLinkedTemplateName": "clusterTemplate.json",
        "name_clusterCustomSSLLinkedTemplateName": "clusterCustomSSLTemplate.json",
        "name_coherenceTemplateName": "coherenceTemplate.json",
        "name_dbLinkedTemplateName": "dbTemplate.json",
        "name_dnsNameforApplicationGateway": "[concat(parameters('dnsNameforApplicationGateway'), take(variables('const_globalResourceNameSuffix'), 6))]",
        "name_dnszonesLinkedTemplateName": "dnszonesTemplate.json",
        "name_domainLabelforApplicationGateway": "[take(concat(variables('name_dnsNameforApplicationGateway'),'-',toLower(resourceGroup().name),'-',toLower(parameters('wlsDomainName'))),63)]",
        "name_keyVaultLinkedTemplateName": "_keyvaultWithNewCertTemplate.json",
        "name_networkSecurityGroup": "[concat(parameters('dnsLabelPrefix'), '-nsg-', variables('const_globalResourceNameSuffix'))]",
        "name_nsgLinkedTemplateName": "nsgNestedTemplate.json",
        "name_managedVMNamePrefix": "[concat(parameters('managedServerPrefix'), variables('const_globalResourceNameSuffix'))]",
        "clusterTemplateRef": "[concat('cluster',if(parameters('enableCustomSSL'),'CustomSSL',''),'LinkedTemplate')]",
        "name_clusterTemplate": "clusterLinkedTemplate",
        "name_clusterCustomSSLTemplate": "clusterCustomSSLLinkedTemplate",
        "name_keyVaultName": "[concat('wls-kv-', variables('const_globalResourceNameSuffix'))]",
        "name_secretName": "mySelfSignedCertificate",
        // If adding a new resource, add the resource identifier to the array below
        // Also modify createUIDefinition.json to include the new resource
        "obj_tagsByResources": {
            "${identifier.applicationGateways}": "[funcTags.tagsFilter(parameters('tagsByResource'), '${identifier.applicationGateways}')]",
            "${identifier.availabilitySets}": "[funcTags.tagsFilter(parameters('tagsByResource'), '${identifier.availabilitySets}')]",
            "${identifier.dnszones}": "[funcTags.tagsFilter(parameters('tagsByResource'), '${identifier.dnszones}')]",
            "${identifier.networkInterfaces}": "[funcTags.tagsFilter(parameters('tagsByResource'), '${identifier.networkInterfaces}')]",
            "${identifier.networkSecurityGroups}": "[funcTags.tagsFilter(parameters('tagsByResource'), '${identifier.networkSecurityGroups}')]",
            "${identifier.publicIPAddresses}": "[funcTags.tagsFilter(parameters('tagsByResource'), '${identifier.publicIPAddresses}')]",
            "${identifier.privateEndpoints}": "[funcTags.tagsFilter(parameters('tagsByResource'), '${identifier.privateEndpoints}')]",
            "${identifier.storageAccounts}": "[funcTags.tagsFilter(parameters('tagsByResource'), '${identifier.storageAccounts}')]",
            "${identifier.vaults}": "[funcTags.tagsFilter(parameters('tagsByResource'), '${identifier.vaults}')]",
            "${identifier.virtualNetworks}": "[funcTags.tagsFilter(parameters('tagsByResource'), '${identifier.virtualNetworks}')]",
            "${identifier.virtualMachines}": "[funcTags.tagsFilter(parameters('tagsByResource'), '${identifier.virtualMachines}')]",
            "${identifier.virtualMachinesExtensions}": "[funcTags.tagsFilter(parameters('tagsByResource'), '${identifier.virtualMachinesExtensions}')]",
            "${identifier.deploymentScripts}": "[funcTags.tagsFilter(parameters('tagsByResource'), '${identifier.deploymentScripts}')]",
            "${identifier.userAssignedIdentities}": "[funcTags.tagsFilter(parameters('tagsByResource'), '${identifier.userAssignedIdentities}')]",
            "${identifier.resourcesDeployment}": "[funcTags.tagsFilter(parameters('tagsByResource'), '${identifier.resourcesDeployment}')]"
        }
    },
    "functions": [
        {
            // This same function is defined in the mainTemplate.json for every other offer.
            // Please ensure any changes are applied in all the other places.
            "namespace": "funcTags",
            "members": {
                "tagsFilter": {
                    "parameters": [
                        {
                            "name": "tagsByResource",
                            "type": "object"
                        },
                        {
                            "name": "resourceIdentifier",
                            "type": "string"
                        }
                    ],
                    "output": {
                        "type": "object",
                        "value": "[if(contains(parameters('tagsByResource'), parameters('resourceIdentifier')), parameters('tagsByResource')[parameters('resourceIdentifier')], json('{}'))]"
                    }
                }
            }
        }
    ],
    "resources": [
        {
            "apiVersion": "${azure.apiVersionForDeployment}",
            "name": "${cluster.start}",
            "type": "Microsoft.Resources/deployments",
            "tags": "[variables('obj_tagsByResources')['${identifier.resourcesDeployment}']]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersionForDeployment}",
            "name": "[variables('name_clusterTemplate')]",
            "tags": "[variables('obj_tagsByResources')['${identifier.resourcesDeployment}']]",
            "condition": "[not(parameters('enableCustomSSL'))]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_clusterLinkedTemplateName')))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    },
                    "_globalResourceNameSuffix": {
                        "value": "[variables('const_globalResourceNameSuffix')]"
                    },
                    "adminPasswordOrKey": {
                        "value": "[parameters('adminPasswordOrKey')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "adminVMNamePrefix": {
                    	 "value": "[parameters('adminVMNamePrefix')]"
                    },                    
                    "adminVMName": {
                        "value": "[variables('name_adminVM')]"
                    },
                    "authenticationType": {
                        "value": "[parameters('authenticationType')]"
                    },
                    "addressPrefixes": {
                        "value": "[parameters('addressPrefixes')]"
                    },
                    "dnsLabelPrefix": {
                        "value": "[parameters('dnsLabelPrefix')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "managedServerPrefix": {
                        "value": "[parameters('managedServerPrefix')]"
                    },
                    "managedVMNamePrefix": {
                        "value": "[variables('name_managedVMNamePrefix')]"
                    },
                    "numberOfInstances": {
                        "value": "[parameters('numberOfInstances')]"
                    },
                    "nsgName": {
                        "value": "[variables('name_networkSecurityGroup')]"
                    },
                    "portsToExpose": {
                        "value": "[parameters('portsToExpose')]"
                    },
                    "skuUrnVersion": {
                        "value": "[parameters('skuUrnVersion')]"
                    },
                    "subnetName": {
                        "value": "[parameters('subnetName')]"
                    },
                    "subnetPrefix": {
                        "value": "[parameters('subnetPrefix')]"
                    },
                    "subnetForAppGateway": {
                        "value": "[parameters('subnetForAppGateway')]"
                    },
                    "subnetPrefixForAppGateway": {
                        "value": "[parameters('subnetPrefixForAppGateway')]"
                    },
                    "tagsByResource": {
                        "value": "[variables('obj_tagsByResources')]"
                    },
                    "usePreviewImage": {
                        "value": "[parameters('usePreviewImage')]"
                    },
                    "useSystemAssignedManagedIdentity": {
                        "value": "[parameters('useSystemAssignedManagedIdentity')]"
                    },
                    "vmSize": {
                        "value": "[variables('const_vmSize')]"
                    },
                    "virtualNetworkNewOrExisting": {
                        "value": "[parameters('virtualNetworkNewOrExisting')]"
                    },
                    "virtualNetworkName": {
                        "value": "[parameters('virtualNetworkName')]"
                    },
                    "virtualNetworkResourceGroupName": {
                        "value": "[parameters('virtualNetworkResourceGroupName')]"
                    },
                    "wlsDomainName": {
                        "value": "[parameters('wlsDomainName')]"
                    },
                    "wlsPassword": {
                        "value": "[parameters('wlsPassword')]"
                    },
                    "wlsUserName": {
                        "value": "[parameters('wlsUserName')]"
                    },
                    "enableAppGateway": {
                        "value": "[parameters('enableAppGateway')]"
                    },
                    "enableHTTPAdminListenPort": {
                        "value": "[parameters('enableHTTPAdminListenPort')]"
                    },
                    "enableDNSConfiguration": {
                        "value": "[parameters('enableDNSConfiguration')]"
                    },
                    "customDNSNameForAdminServer": {
                        "value": "[if(parameters('enableDNSConfiguration'), format('{0}.{1}', parameters('dnszoneAdminConsoleLabel'),parameters('dnszoneName')),'')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersionForDeployment}",
            "tags": "[variables('obj_tagsByResources')['${identifier.resourcesDeployment}']]",
            "name": "[variables('name_clusterCustomSSLTemplate')]",
            "condition": "[parameters('enableCustomSSL')]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_clusterCustomSSLLinkedTemplateName')))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    },
                    "_globalResourceNameSuffix": {
                        "value": "[variables('const_globalResourceNameSuffix')]"
                    },
                    "adminPasswordOrKey": {
                        "value": "[parameters('adminPasswordOrKey')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "adminVMNamePrefix": {
                    	 "value": "[parameters('adminVMNamePrefix')]"
                    },
                    "adminVMName": {
                        "value": "[variables('name_adminVM')]"
                    },
                    "authenticationType": {
                        "value": "[parameters('authenticationType')]"
                    },
                    "addressPrefixes": {
                        "value": "[parameters('addressPrefixes')]"
                    },
                    "dnsLabelPrefix": {
                        "value": "[parameters('dnsLabelPrefix')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "managedServerPrefix": {
                        "value": "[parameters('managedServerPrefix')]"
                    },
                    "managedVMNamePrefix": {
                        "value": "[variables('name_managedVMNamePrefix')]"
                    },
                    "numberOfInstances": {
                        "value": "[parameters('numberOfInstances')]"
                    },
                    "nsgName": {
                        "value": "[variables('name_networkSecurityGroup')]"
                    },
                    "portsToExpose": {
                        "value": "[parameters('portsToExpose')]"
                    },
                    "skuUrnVersion": {
                        "value": "[parameters('skuUrnVersion')]"
                    },
                    "subnetName": {
                        "value": "[parameters('subnetName')]"
                    },
                    "subnetPrefix": {
                        "value": "[parameters('subnetPrefix')]"
                    },
                    "subnetForAppGateway": {
                        "value": "[parameters('subnetForAppGateway')]"
                    },
                    "subnetPrefixForAppGateway": {
                        "value": "[parameters('subnetPrefixForAppGateway')]"
                    },
                    "tagsByResource": {
                        "value": "[variables('obj_tagsByResources')]"
                    },
                    "usePreviewImage": {
                        "value": "[parameters('usePreviewImage')]"
                    },
                    "useSystemAssignedManagedIdentity": {
                        "value": "[parameters('useSystemAssignedManagedIdentity')]"
                    },
                    "vmSize": {
                        "value": "[variables('const_vmSize')]"
                    },
                    "virtualNetworkNewOrExisting": {
                        "value": "[parameters('virtualNetworkNewOrExisting')]"
                    },
                    "virtualNetworkName": {
                        "value": "[parameters('virtualNetworkName')]"
                    },
                    "virtualNetworkResourceGroupName": {
                        "value": "[parameters('virtualNetworkResourceGroupName')]"
                    },
                    "wlsDomainName": {
                        "value": "[parameters('wlsDomainName')]"
                    },
                    "wlsPassword": {
                        "value": "[parameters('wlsPassword')]"
                    },
                    "wlsUserName": {
                        "value": "[parameters('wlsUserName')]"
                    },
                    "enableAppGateway": {
                        "value": "[parameters('enableAppGateway')]"
                    },
                    "enableHTTPAdminListenPort": {
                        "value": "[parameters('enableHTTPAdminListenPort')]"
                    },
                    "enableDNSConfiguration": {
                        "value": "[parameters('enableDNSConfiguration')]"
                    },
                    "customDNSNameForAdminServer": {
                        "value": "[if(parameters('enableDNSConfiguration'), format('{0}.{1}', parameters('dnszoneAdminConsoleLabel'),parameters('dnszoneName')),'')]"
                    },
                    "enableCustomSSL": {
                        "value": "[parameters('enableCustomSSL')]"
                    },
                    "sslCustomIdentityKeyStoreData": {
                        "value": "[parameters('uploadedCustomIdentityKeyStoreData')]"
                    },
                    "sslCustomIdentityKeyStorePassPhrase": {
                        "value": "[parameters('uploadedCustomIdentityKeyStorePassphrase')]"
                    },
                    "sslCustomIdentityKeyStoreType": {
                        "value": "[parameters('uploadedCustomIdentityKeyStoreType')]"
                    },
                    "sslCustomTrustKeyStoreData": {
                        "value": "[parameters('uploadedCustomTrustKeyStoreData')]"
                    },
                    "sslCustomTrustKeyStorePassPhrase": {
                        "value": "[parameters('uploadedCustomTrustKeyStorePassPhrase')]"
                    },
                    "sslCustomTrustKeyStoreType": {
                        "value": "[parameters('uploadedCustomTrustKeyStoreType')]"
                    },
                    "sslPrivateKeyAlias": {
                        "value": "[parameters('uploadedPrivateKeyAlias')]" 
                    },
                    "sslPrivateKeyPassPhrase": {
                        "value": "[parameters('uploadedPrivateKeyPassPhrase')]" 
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersionForDeployment}",
            "tags": "[variables('obj_tagsByResources')['${identifier.resourcesDeployment}']]",
            "name": "keyVaultwithSelfSignedAppGatewaySSLCert",
            "condition": "[and(parameters('enableAppGateway'), equals(parameters('appGatewayCertificateOption'), variables('const_appGatewaySSLCertOptionGenerateCert')))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('clusterTemplateRef'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_keyVaultLinkedTemplateName')))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "_globalResourceNameSuffix": {
                        "value": "[variables('const_globalResourceNameSuffix')]"
                    },
                    "keyVaultName": {
                        "value": "[variables('name_keyVaultName')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "secretName": {
                        "value": "[variables('name_secretName')]"
                    },
                    "sku": {
                        "value": "[parameters('keyVaultSku')]"
                    },
                    "subjectName": {
                        "value": "[format('CN={0}', if(parameters('enableDNSConfiguration'), format('{0}.{1}', parameters('dnsNameforApplicationGateway'), parameters('dnszoneName')), variables('const_azureSubjectName')))]"
                    },
                    "tagsByResource": {
                        "value": "[variables('obj_tagsByResources')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersionForDeployment}",
            "tags": "[variables('obj_tagsByResources')['${identifier.resourcesDeployment}']]",
            "condition": "[equals(parameters('virtualNetworkNewOrExisting'), 'new')]",
            "name": "networkSecurityLinkedTemplate",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_nsgLinkedTemplateName')))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "networkSecurityGroupName": {
                        "value": "[variables('name_networkSecurityGroup')]"
                    },
                    "denyPublicTrafficForAdminServer": {
                        "value": "[parameters('denyPublicTrafficForAdminServer')]"
                    },
                    "denyPublicTrafficForManagedServer": {
                        "value": "[parameters('denyPublicTrafficForManagedServer')]"
                    },
                    "enableAppGateway": {
                        "value": "[parameters('enableAppGateway')]"
                    }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('clusterTemplateRef'))]"
            ]
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersionForDeployment}",
            "tags": "[variables('obj_tagsByResources')['${identifier.resourcesDeployment}']]",
            "name": "appGatewayLinkedTemplate",
            "condition": "[parameters('enableAppGateway')]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_appGatewayConnector')))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    },
                    "adminVMName": {
                        "value": "[variables('name_adminVM')]"
                    },
                    "appGatewayName": {
                        "value": "[concat(parameters('dnsLabelPrefix'), '-agw-', variables('const_globalResourceNameSuffix'))]"
                    },
                    "appGatewayCertificateOption": {
                        "value": "[parameters('appGatewayCertificateOption')]"
                    },
                    "appGatewaySSLBackendCertData": {
                        "value": "[parameters('appGatewaySSLBackendCertData')]"
                    },
                    "autoGeneratedSSLCertKeyVaultName": {
                        "value": "[if(equals(parameters('appGatewayCertificateOption'), variables('const_appGatewaySSLCertOptionGenerateCert')), reference('keyVaultwithSelfSignedAppGatewaySSLCert', '${azure.apiVersionForDeployment}').outputs.keyvaultName.value, '')]"
                    },
                    "autoGeneratedSSLCertSecretName": {
                        "value": "[if(equals(parameters('appGatewayCertificateOption'), variables('const_appGatewaySSLCertOptionGenerateCert')), reference('keyVaultwithSelfSignedAppGatewaySSLCert', '${azure.apiVersionForDeployment}').outputs.secretName.value, '')]"
                    },
                    "customDomainNameforApplicationGateway": {
                        "value": "[format('{0}.{1}', parameters('dnszoneAppGatewayLabel'), parameters('dnszoneName'))]"
                    },
                    "domainLabelforApplicationGateway": {
                        "value": "[variables('name_domainLabelforApplicationGateway')]"
                    },
                    "enableCustomSSL": {
                        "value": "[parameters('enableCustomSSL')]"
                    },
                    "enableCookieBasedAffinity": {
                        "value": "[parameters('enableCookieBasedAffinity')]"
                    },
                    "gatewayPublicIPAddressName": {
                        "value": "[concat(parameters('gatewayPublicIPAddressName'), variables('const_globalResourceNameSuffix'))]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "managedVMNamePrefix": {
                        "value": "[variables('name_managedVMNamePrefix')]"
                    },
                    "numberOfInstances": {
                        "value": "[parameters('numberOfInstances')]"
                    },
                    "overrideHostName": {
                        "value": "[parameters('enableDNSConfiguration')]"
                    },
                    "sslCertData": {
                        "value": "[parameters('appGatewaySSLCertData')]"
                    },
                    "sslCertPswData": {
                        "value": "[parameters('appGatewaySSLCertPassword')]"
                    },
                    "tagsByResource": {
                        "value": "[variables('obj_tagsByResources')]"
                    },
                    "virtualNetworkNewOrExisting": {
                        "value": "[parameters('virtualNetworkNewOrExisting')]"
                    },
                    "virtualNetworkResourceGroupName": {
                        "value": "[parameters('virtualNetworkResourceGroupName')]"
                    },
                    "virtualNetworkName": {
                        "value": "[parameters('virtualNetworkName')]"
                    },
                    "subnetForAppGateway": {
                        "value": "[parameters('subnetForAppGateway')]"
                    },
                    "wlsDomainName": {
                        "value": "[parameters('wlsDomainName')]"
                    },
                    "wlsPassword": {
                        "value": "[parameters('wlsPassword')]"
                    },
                    "wlsUserName": {
                        "value": "[parameters('wlsUserName')]"
                    }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'keyVaultwithSelfSignedAppGatewaySSLCert')]",                
                "[resourceId('Microsoft.Resources/deployments', variables('clusterTemplateRef'))]"
            ]
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersionForDeployment}",
            "tags": "[variables('obj_tagsByResources')['${identifier.resourcesDeployment}']]",
            "name": "dnszonesLinkedTemplate",
            "condition": "[parameters('enableDNSConfiguration')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'appGatewayLinkedTemplate')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_dnszonesLinkedTemplateName')))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    },
                    "_globalResourceNameSuffix": {
                        "value": "[variables('const_globalResourceNameSuffix')]"
                    },
                    "dnszonesARecordSetNames": {
                        "value": [
                            "[parameters('dnszoneAdminConsoleLabel')]"
                        ]
                    },
                    "dnszonesCNAMEAlias": {
                        "value": "[if(parameters('enableAppGateway'), createArray(reference('appGatewayLinkedTemplate', '${azure.apiVersionForDeployment}').outputs.appGatewayAlias.value), createArray())]"
                    },
                    "dnszonesCNAMERecordSetNames": {
                        "value": "[if(parameters('enableAppGateway'), createArray(parameters('dnszoneAppGatewayLabel')), createArray())]"
                    },
                    "dnszoneName": {
                        "value": "[parameters('dnszoneName')]"
                    },
                    "hasDNSZones": {
                        "value": "[parameters('hasDNSZones')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "resourceGroup": {
                        "value": "[parameters('dnszoneResourceGroup')]"
                    },
                    "targetResources": {
                        "value": [
                            "[reference(variables('clusterTemplateRef'), '${azure.apiVersionForDeployment}').outputs._adminPublicIPId.value]"
                        ]
                    },
                    "tagsByResource": {
                        "value": "[variables('obj_tagsByResources')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "${azure.apiVersionForDeployment}",
            "tags": "[variables('obj_tagsByResources')['${identifier.resourcesDeployment}']]",
            "name": "dbLinkedTemplate",
            "condition": "[parameters('enableDB')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'dnszonesLinkedTemplate')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_dbLinkedTemplateName')))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    },
                    "adminVMName": {
                        "value": "[variables('name_adminVM')]"
                    },
                    "databaseType": {
                        "value": "[parameters('databaseType')]"
                    },
                    "dbGlobalTranPro": {
                        "value": "[parameters('dbGlobalTranPro')]"
                    },
                    "dbIdentity": {
                        "value": "[parameters('dbIdentity')]"
                    },
                    "dbPassword": {
                        "value": "[parameters('dbPassword')]"
                    },
                    "dbUser": {
                        "value": "[parameters('dbUser')]"
                    },
                    "dsConnectionURL": {
                        "value": "[parameters('dsConnectionURL')]"
                    },
                    "enablePswlessConnection": {
                        "value": "[parameters('enablePswlessConnection')]"
                    },
                    "jdbcDataSourceName": {
                        "value": "[parameters('jdbcDataSourceName')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "managedServerPrefix": {
                        "value": "[parameters('managedServerPrefix')]"
                    },
                    "managedVMNamePrefix": {
                        "value": "[variables('name_managedVMNamePrefix')]"
                    },
                    "numberOfManagedApplicationInstances": {
                        "value": "[add(parameters('numberOfInstances'),-1)]"
                    },
                    "tagsByResource": {
                        "value": "[variables('obj_tagsByResources')]"
                    },
                    "wlsDomainName": {
                        "value": "[parameters('wlsDomainName')]"
                    },
                    "wlsPassword": {
                        "value": "[parameters('wlsPassword')]"
                    },
                    "wlsUserName": {
                        "value": "[parameters('wlsUserName')]"
                    }
                }
            }
        },
        {
            "name": "coherenceTemplate",
            "type": "Microsoft.Resources/deployments",
            "tags": "[variables('obj_tagsByResources')['${identifier.resourcesDeployment}']]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'dbLinkedTemplate')]"
            ],
            "apiVersion": "${azure.apiVersionForDeployment}",
            "condition": "[and(parameters('enableCoherence'),not(parameters('enableCustomSSL')))]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_coherenceTemplateName')))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    },
                    "_globalResourceNameSuffix": {
                        "value": "[variables('const_globalResourceNameSuffix')]"
                    },
                    "adminPasswordOrKey": {
                        "value": "[parameters('adminPasswordOrKey')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "adminVMName": {
                        "value": "[variables('name_adminVM')]"
                    },
                    "adminVMNamePrefix": {
                    	 "value": "[parameters('adminVMNamePrefix')]"
                    },
                    "authenticationType": {
                        "value": "[parameters('authenticationType')]"
                    },
                    "dnsLabelPrefix": {
                        "value": "[parameters('dnsLabelPrefix')]"
                    },
                    "enableCoherenceWebLocalStorage": {
                        "value": "[parameters('enableCoherenceWebLocalStorage')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "managedServerPrefix": {
                        "value": "[parameters('managedServerPrefix')]"
                    },
                    "managedVMNamePrefix": {
                        "value": "[variables('name_managedVMNamePrefix')]"
                    },
                    "numberOfCoherenceCacheInstances": {
                        "value": "[parameters('numberOfCoherenceCacheInstances')]"
                    },
                    "skuUrnVersion": {
                        "value": "[parameters('skuUrnVersion')]"
                    },
                    "storageAccountName": {
                        "value": "[reference(variables('clusterTemplateRef'), '${azure.apiVersionForDeployment}').outputs.storageAccountName.value]"
                    },
                    "subnetName": {
                        "value": "[parameters('subnetName')]"
                    },
                    "tagsByResource": {
                        "value": "[variables('obj_tagsByResources')]"
                    },
                    "usePreviewImage": {
                        "value": "[parameters('usePreviewImage')]"
                    },
                    "vmSizeSelectForCoherence": {
                        "value": "[variables('const_vmSizeCoherence')]"
                    },
                    "virtualNetworkResourceGroupName": {
                        "value": "[parameters('virtualNetworkResourceGroupName')]"
                    },
                    "virtualNetworkName": {
                        "value": "[parameters('virtualNetworkName')]"
                    },
                    "wlsDomainName": {
                        "value": "[parameters('wlsDomainName')]"
                    },
                    "wlsPassword": {
                        "value": "[parameters('wlsPassword')]"
                    },
                    "wlsUserName": {
                        "value": "[parameters('wlsUserName')]"
                    },
                    "enableDNSConfiguration": {
                        "value": "[parameters('enableDNSConfiguration')]"
                    },
                    "customDNSNameForAdminServer": {
                        "value": "[if(parameters('enableDNSConfiguration'), format('{0}.{1}', parameters('dnszoneAdminConsoleLabel'),parameters('dnszoneName')),'')]"
                    },
                    "enableCustomSSL": {
                        "value": "[parameters('enableCustomSSL')]"
                    }
                }
            }
        },
        {
            "name": "coherenceTemplateWithCustomSSL",
            "type": "Microsoft.Resources/deployments",
            "tags": "[variables('obj_tagsByResources')['${identifier.resourcesDeployment}']]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'dbLinkedTemplate')]"
            ],
            "apiVersion": "${azure.apiVersionForDeployment}",
            "condition": "[and(parameters('enableCoherence'),parameters('enableCustomSSL'))]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_coherenceTemplateName')))]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "_artifactsLocation": {
                        "value": "[parameters('_artifactsLocation')]"
                    },
                    "_artifactsLocationSasToken": {
                        "value": "[parameters('_artifactsLocationSasToken')]"
                    },
                    "_globalResourceNameSuffix": {
                        "value": "[variables('const_globalResourceNameSuffix')]"
                    },
                    "adminPasswordOrKey": {
                        "value": "[parameters('adminPasswordOrKey')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "adminVMName": {
                        "value": "[variables('name_adminVM')]"
                    },
                    "adminVMNamePrefix": {
                    	 "value": "[parameters('adminVMNamePrefix')]"
                    },                    
                    "authenticationType": {
                        "value": "[parameters('authenticationType')]"
                    },
                    "dnsLabelPrefix": {
                        "value": "[parameters('dnsLabelPrefix')]"
                    },
                    "enableCoherenceWebLocalStorage": {
                        "value": "[parameters('enableCoherenceWebLocalStorage')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "managedServerPrefix": {
                        "value": "[parameters('managedServerPrefix')]"
                    },
                    "managedVMNamePrefix": {
                        "value": "[variables('name_managedVMNamePrefix')]"
                    },
                    "numberOfCoherenceCacheInstances": {
                        "value": "[parameters('numberOfCoherenceCacheInstances')]"
                    },
                    "skuUrnVersion": {
                        "value": "[parameters('skuUrnVersion')]"
                    },
                    "storageAccountName": {
                        "value": "[reference(variables('clusterTemplateRef'), '${azure.apiVersionForDeployment}').outputs.storageAccountName.value]"
                    },
                    "subnetName": {
                        "value": "[parameters('subnetName')]"
                    },
                    "tagsByResource": {
                        "value": "[variables('obj_tagsByResources')]"
                    },
                    "usePreviewImage": {
                        "value": "[parameters('usePreviewImage')]"
                    },
                    "vmSizeSelectForCoherence": {
                        "value": "[variables('const_vmSizeCoherence')]"
                    },
                    "virtualNetworkResourceGroupName": {
                        "value": "[parameters('virtualNetworkResourceGroupName')]"
                    },
                    "virtualNetworkName": {
                        "value": "[parameters('virtualNetworkName')]"
                    },
                    "wlsDomainName": {
                        "value": "[parameters('wlsDomainName')]"
                    },
                    "wlsPassword": {
                        "value": "[parameters('wlsPassword')]"
                    },
                    "wlsUserName": {
                        "value": "[parameters('wlsUserName')]"
                    },
                    "enableDNSConfiguration": {
                        "value": "[parameters('enableDNSConfiguration')]"
                    },
                    "customDNSNameForAdminServer": {
                        "value": "[if(parameters('enableDNSConfiguration'), format('{0}.{1}', parameters('dnszoneAdminConsoleLabel'),parameters('dnszoneName')),'')]"
                    },
                    "enableCustomSSL": {
                        "value": "[parameters('enableCustomSSL')]"
                    },
                    "sslCustomIdentityKeyStoreData": {
                        "value": "[parameters('uploadedCustomIdentityKeyStoreData')]"
                    },
                    "sslCustomIdentityKeyStorePassPhrase": {
                        "value": "[parameters('uploadedCustomIdentityKeyStorePassphrase')]"
                    },
                    "sslCustomIdentityKeyStoreType": {
                        "value": "[parameters('uploadedCustomIdentityKeyStoreType')]"
                    },
                    "sslCustomTrustKeyStoreData": {
                        "value": "[parameters('uploadedCustomTrustKeyStoreData')]"
                    },
                    "sslCustomTrustKeyStorePassPhrase": {
                        "value": "[parameters('uploadedCustomTrustKeyStorePassPhrase')]"
                    },
                    "sslCustomTrustKeyStoreType": {
                        "value": "[parameters('uploadedCustomTrustKeyStoreType')]"
                    },
                    "sslPrivateKeyAlias": {
                        "value": "[parameters('uploadedPrivateKeyAlias')]" 
                    },
                    "sslPrivateKeyPassPhrase": {
                        "value": "[parameters('uploadedPrivateKeyPassPhrase')]" 
                    }
                }
            }
        },
        {
            "apiVersion": "${azure.apiVersionForDeployment}",
            "name": "${cluster.end}",
            "type": "Microsoft.Resources/deployments",
            "tags": "[variables('obj_tagsByResources')['${identifier.resourcesDeployment}']]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('clusterTemplateRef'))]",
                "[resourceId('Microsoft.Resources/deployments', 'keyVaultwithSelfSignedAppGatewaySSLCert')]",
                "[resourceId('Microsoft.Resources/deployments', 'appGatewayLinkedTemplate')]",
                "[resourceId('Microsoft.Resources/deployments', 'dnszonesLinkedTemplate')]",
                "[resourceId('Microsoft.Resources/deployments', 'dbLinkedTemplate')]",
                "[resourceId('Microsoft.Resources/deployments', 'coherenceTemplate')]",
                "[resourceId('Microsoft.Resources/deployments', 'coherenceTemplateWithCustomSSL')]"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        }
    ],
    "outputs": {
        "adminVMName": {
            "type": "string",
            "value": "[variables('name_adminVM')]"
        },
        "managedServerVMNamePrefix": {
            "type": "string",
            "value": "[concat(parameters('managedServerPrefix'), variables('const_globalResourceNameSuffix'), 'VM')]"
        },
        "wlsDomainLocation": {
            "type": "string",
            "value": "[reference(variables('clusterTemplateRef'), '${azure.apiVersionForDeployment}').outputs.wlsDomainLocation.value]"
        },
        "adminHostName": {
            "type": "string",
            "value": "[reference(variables('clusterTemplateRef'), '${azure.apiVersionForDeployment}').outputs.adminHostName.value]"
        },
        "adminConsole": {
            "type": "string",
            "value": "[if(parameters('enableDNSConfiguration'), uri(format('http://{0}.{1}:7001/console/', parameters('dnszoneAdminConsoleLabel'), parameters('dnszoneName')), ''),reference(variables('clusterTemplateRef'), '${azure.apiVersionForDeployment}').outputs.adminConsole.value)]"
        },
        "adminSecuredConsole": {
            "type": "string",
            "value": "[if(parameters('enableDNSConfiguration'), uri(format('https://{0}.{1}:7002/console/', parameters('dnszoneAdminConsoleLabel'), parameters('dnszoneName')), ''),reference(variables('clusterTemplateRef'), '${azure.apiVersionForDeployment}').outputs.adminSecuredConsole.value)]"
        },
        "appGatewayURL": {
            "type": "string",
            "value": "[if(parameters('enableAppGateway'), if(parameters('enableDNSConfiguration'), uri(concat('http://',parameters('dnszoneAppGatewayLabel'),'.',parameters('dnszoneName')),''), reference('appGatewayLinkedTemplate', '${azure.apiVersionForDeployment}').outputs.appGatewayURL.value),'')]"
        },
        "appGatewaySecuredURL": {
            "type": "string",
            "value": "[if(parameters('enableAppGateway'), if(parameters('enableDNSConfiguration'), uri(concat('https://',parameters('dnszoneAppGatewayLabel'),'.',parameters('dnszoneName')),''), reference('appGatewayLinkedTemplate', '${azure.apiVersionForDeployment}').outputs.appGatewaySecuredURL.value),'')]"
        }
    }
}
