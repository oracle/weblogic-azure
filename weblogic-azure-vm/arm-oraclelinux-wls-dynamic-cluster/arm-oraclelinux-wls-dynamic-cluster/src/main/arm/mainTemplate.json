{
	"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"_artifactsLocation": {
			"type": "string",
			"metadata": {
				"description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
			},
			"defaultValue": "[deployment().properties.templateLink.uri]"
		},
		"_artifactsLocationSasToken": {
			"type": "securestring",
			"metadata": {
				"description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
			},
			"defaultValue": ""
		},
		"aadsPortNumber": {
			"defaultValue": "636",
			"type": "string",
			"metadata": {
				"description": "Accessible port of the LDAP server."
			}
		},
		"aadsPublicIP": {
			"defaultValue": "",
			"type": "string"
		},
		"aadsServerHost": {
			"defaultValue": "",
			"type": "string",
			"metadata": {
				"description": "The LDAP server host."
			}
		},
		"adminPasswordOrKey": {
			"type": "securestring",
			"metadata": {
				"description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
			}
		},
		"adminUsername": {
			"defaultValue": "weblogic",
			"type": "string",
			"metadata": {
				"description": "User name for the Virtual Machine."
			}
		},
		"adminVMName": {
			"defaultValue": "adminVM",
			"type": "string",
			"metadata": {
				"description": "Admin Server hosting VM name."
			}
		},
		"authenticationType": {
			"type": "string",
			"defaultValue": "password",
			"allowedValues": [
				"sshPublicKey",
				"password"
			],
			"metadata": {
				"description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
			}
		},
		"databaseType": {
			"defaultValue": "",
			"type": "string",
			"metadata": {
				"description": "One of the supported database types"
			}
		},
		"dbGlobalTranPro": {
			"defaultValue": "OnePhaseCommit",
			"type": "string",
			"metadata": {
				"description": "Determines the transaction protocol (global transaction processing behavior) for the data source."
			}
		},
		"dbPassword": {
			"defaultValue": "",
			"type": "securestring",
			"metadata": {
				"description": "Password for Database"
			}
		},
		"dbUser": {
			"defaultValue": "",
			"type": "string",
			"metadata": {
				"description": "Userid of Database"
			}
		},
		"denyPublicTrafficForAdminServer": {
			"type": "bool",
			"defaultValue": false,
			"metadata": {
				"description": "Set 'true' to deny public inbound traffic for the admin server."
			}
		},
		"denyPublicTrafficForManagedServer": {
			"type": "bool",
			"defaultValue": true
		},
		"dnsLabelPrefix": {
			"defaultValue": "wls",
			"type": "string",
			"metadata": {
				"description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
			}
		},
		"dnszoneName": {
			"defaultValue": "contoso.xyz",
			"type": "string",
			"metadata": {
				"description": "Azure DNS Zone name."
			}
		},
		"dnszoneResourceGroup": {
			"type": "string",
			"defaultValue": "[resourceGroup().name]",
			"metadata": {
				"description": "Name of the resource group containing the Azure DNS Zone."
			}
		},
		"dnszoneAdminConsoleLabel": {
			"type": "string",
			"defaultValue": "console",
			"metadata": {
				"description": "Specify a label used to generate subdomain of Oracle WebLogic Administration Console. The final subdomain name will be label.dnszoneName, e.g. console.contoso.xyz"
			}
		},
		"dnszoneLoadBalancerLabel": {
			"type": "string",
			"defaultValue": "applications",
			"metadata": {
				"description": "Specify a label used to generate subdomain of Application Gateway. The final subdomain name will be label.dnszoneName, e.g. applications.contoso.xyz"
			}
		},
		"dsConnectionURL": {
			"defaultValue": "",
			"type": "string",
			"metadata": {
				"description": "JDBC Connection String"
			}
		},
		"dynamicClusterSize": {
			"defaultValue": 2,
			"type": "int",
			"metadata": {
				"description": "Initial Number of Managed Servers that will be configured in the Dynamic Cluster"
			}
		},
		"elasticsearchEndpoint": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Endpoint of the Elasticsearch instance."
			}
		},
		"elasticsearchPassword": {
			"type": "securestring",
			"defaultValue": "[newGuid()]",
			"metadata": {
				"description": "The credentials to distibute message with REST API to Elasticsearch instance."
			}
		},
		"elasticsearchUserName": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "The credentials to distibute message with REST API to Elasticsearch instance."
			}
		},
		"enableAAD": {
			"defaultValue": false,
			"type": "bool",
			"metadata": {
				"description": "Bool value, if it's set to true, will enable Azure Active Directory after WebLogic Server starts."
			}
		},
		"enableCoherence": {
			"defaultValue": false,
			"type": "bool",
			"metadata": {
				"description": "If true, create Coherence cluster with data tier for cache."
			}
		},
		"enableCustomDNS": {
			"defaultValue": false,
			"type": "bool",
			"metadata": {
				"description": "If true, use the supplied parameters to configure custome DNS."
			}
		},
		"enableCoherenceWebLocalStorage": {
			"defaultValue": true,
			"type": "bool",
			"metadata": {
				"description": "Specifies whether Local Storage is enabled for the Coherence*Web cluster tier."
			}
		},
		"enableDB": {
			"defaultValue": false,
			"type": "bool",
			"metadata": {
				"description": "If true, use the supplied parameters to connect the cluster to a pre-provisioned database."
			}
		},
		"enableELK": {
			"defaultValue": false,
			"type": "bool",
			"metadata": {
				"description": "If true, use the supplied parameters to distribute WebLogic Server logs to the Elasticsearch instance."
			}
		},
		"enableOHS": {
			"defaultValue": false,
			"type": "bool",
			"metadata": {
				"description": "Bool value, if it's set to true, it will setup OHS and configures for WebLogic Server cluster"
			}
		},
		"hasDNSZones": {
			"type": "bool",
			"defaultValue": false,
			"metadata": {
				"description": "If true, the template will update records to the existing DNS Zone. If false, the template will create a new DNS Zone."
			}
		},
		"jdbcDataSourceName": {
			"defaultValue": "",
			"type": "string",
			"metadata": {
				"description": "JNDI Name for JDBC Datasource"
			}
		},
		"uploadedCustomIdentityKeyStoreData": {
			"type": "securestring",
			"metadata": {
				"description": "Custom Identity KeyStore Data"
			},
			"defaultValue": ""
		},
		"uploadedCustomIdentityKeyStorePassphrase": {
			"type": "securestring",
			"metadata": {
				"description": "Custom Identity KeyStore Passphrase"
			},
			"defaultValue": ""
		},
		"uploadedCustomIdentityKeyStoreType": {
			"type": "string",
			"metadata": {
				"description": "Weblogic Custom Identity Keystore Type"
			},
			"defaultValue": "JKS"
		},
		"uploadedCustomTrustKeyStoreData": {
			"type": "securestring",
			"metadata": {
				"description": "Custom Trust KeyStore Data"
			},
			"defaultValue": ""
		},
		"uploadedCustomTrustKeyStorePassPhrase": {
			"type": "securestring",
			"metadata": {
				"description": "Custom Trust KeyStore PassPhrase"
			},
			"defaultValue": ""
		},
		"uploadedCustomTrustKeyStoreType": {
			"type": "string",
			"metadata": {
				"description": "Weblogic Custom Trust Keystore Type"
			},
			"defaultValue": "JKS"
		},
		"uploadedPrivateKeyAlias": {
			"type": "string",
			"metadata": {
				"description": "Alias of the private key"
			},
			"defaultValue": "privateKeyAlias"
		},
		"uploadedPrivateKeyPassPhrase": {
			"type": "securestring",
			"metadata": {
				"description": "Password of the private key"
			},
			"defaultValue": ""
		},
		"enabledForTemplateDeployment": {
			"type": "bool",
			"metadata": {
				"description": "Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
			},
			"defaultValue": true
		},
		"keyVaultSku": {
			"defaultValue": "Standard",
			"type": "string",
			"metadata": {
				"description": "Price tier for Key Vault."
			}
		},
		"sslConfigurationAccessOption": {
			"type": "string",
			"metadata": {
				"description": "Options to provide required configuration for SSL configuration"
			},
			"allowedValues": [
				"uploadConfig",
				"keyVaultStoredConfig"
			],
			"defaultValue": "keyVaultStoredConfig"
		},
		"keyType": {
			"type": "string",
			"defaultValue": "PKCS12",
			"allowedValues": [
				"JKS",
				"PKCS12"
			],
			"metadata": {
				"description": "Provide Key type is JKS or PKCS12 signed certificates for OHS. Default is PKCS12 format"
			}
		},
		"keyVaultName": {
			"defaultValue": "",
			"type": "string",
			"metadata": {
				"description": "KeyVault Name where certificates are stored for OHS"
			}
		},
		"keyVaultResourceGroup": {
			"defaultValue": "",
			"type": "string",
			"metadata": {
				"description": "Resource group name in current subscription containing the KeyVault for OHS"
			}
		},
		"keyVaultSSLCertDataSecretName": {
			"defaultValue": "",
			"type": "string",
			"metadata": {
				"description": "The name of the secret in the specified KeyVault whose value is the SSL Certificate Data for OHS"
			}
		},
		"keyVaultSSLCertPasswordSecretName": {
			"defaultValue": "",
			"type": "string",
			"metadata": {
				"description": "The name of the secret in the specified KeyVault whose value is the password for the SSL Certificate for OHS"
			}
		},
		"location": {
			"type": "string",
			"defaultValue": "[resourceGroup().location]",
			"metadata": {
				"description": "Location for all resources."
			}
		},
		"logsToIntegrate": {
			"type": "array",
			"defaultValue": [ "HTTPAccessLog", "ServerLog", "DomainLog", "DataSourceLog", "StandardErrorAndOutput", "NodeManagerLog" ],
			"allowedValues": [ "HTTPAccessLog", "ServerLog", "DomainLog", "DataSourceLog", "StandardErrorAndOutput", "NodeManagerLog" ],
			"metadata": {
				"description": "Specify the expeted logs to integrate, you must input at least one log."
			}
		},
		"managedServerPrefix": {
			"defaultValue": "msp",
			"type": "string",
			"metadata": {
				"description": "Provide managed server prefix names"
			}
		},
		"maxDynamicClusterSize": {
			"defaultValue": 10,
			"type": "int",
			"metadata": {
				"description": "Maximum Number of Managed Servers allowed to be configured in the Dynamic Cluster"
			}
		},
		"numberOfCoherenceCacheInstances": {
			"defaultValue": 1,
			"type": "int",
			"minValue": 1,
			"maxValue": 10,
			"metadata": {
				"description": "Number of Coherence cache instances, used to create virtual machines and Managed Server."
			}
		},
		"ohsComponentName": {
			"defaultValue": "ohs_azure",
			"type": "string",
			"metadata": {
				"description": "Provide OHS component name"
			}
		},
		"ohsDomainName": {
			"defaultValue": "ohsStandaloneDomain",
			"type": "string",
			"metadata": {
				"description": "Provide OHS domain name"
			}
		},
		"ohsNMPassword": {
			"defaultValue": "",
			"type": "securestring",
			"metadata": {
				"description": "Password for OHS NodeManager"
			}
		},
		"ohsNMUser": {
			"defaultValue": "weblogic",
			"type": "string",
			"metadata": {
				"description": "Provide OHS NodeManager user name"
			}
		},
		"ohsSkuUrnVersion": {
			"type": "string",
			"defaultValue": "ohs-122140-jdk8-ol76;ohs-122140-jdk8-ol76;latest",
			"allowedValues": [
				"ohs-122140-jdk8-ol76;ohs-122140-jdk8-ol76;latest",
				"ohs-122140-jdk8-ol74;ohs-122140-jdk8-ol74;latest",
				"ohs-122140-jdk8-ol73;ohs-122140-jdk8-ol73;latest"
			],
			"metadata": {
				"description": "The Oracle Linux image with OHS and Java preinstalled. Semicolon separated string of Sku, URN, and Version"
			}
		},
		"ohsVMName": {
			"defaultValue": "ohsVM",
			"type": "string",
			"metadata": {
				"description": "OHS Server hosting VM name."
			}
		},
		"ohshttpPort": {
			"defaultValue": "7777",
			"type": "string",
			"metadata": {
				"description": "Provide OHS HTTP port"
			}
		},
		"ohshttpsPort": {
			"defaultValue": "4444",
			"type": "string",
			"metadata": {
				"description": "Provide OHS HTTPS port"
			}
		},
		"oracleVaultPswd": {
			"defaultValue": "",
			"type": "securestring",
			"metadata": {
				"description": "Password for Oracle Vault required for OHS"
			}
		},
		"portsToExpose": {
			"defaultValue": "80,443,7001-9000",
			"type": "string",
			"metadata": {
				"description": "Ports and port ranges to expose"
			}
		},
		"skuUrnVersion": {
			"type": "string",
			"defaultValue": "owls-141100-jdk11-ol76;Oracle:weblogic-141100-jdk11-ol76:owls-141100-jdk11-ol7;latest",
			"allowedValues": [
				"owls-122130-jdk8-ol73;Oracle:weblogic-122130-jdk8-ol73:owls-122130-jdk8-ol7;latest",
				"owls-122130-jdk8-ol74;Oracle:weblogic-122130-jdk8-ol74:owls-122130-jdk8-ol7;latest",
				"owls-122140-jdk8-ol76;Oracle:weblogic-122140-jdk8-ol76:owls-122140-jdk8-ol7;latest",
				"owls-141100-jdk8-ol76;Oracle:weblogic-141100-jdk8-ol76:owls-141100-jdk8-ol7;latest",
				"owls-141100-jdk11-ol76;Oracle:weblogic-141100-jdk11-ol76:owls-141100-jdk11-ol7;latest",
				"owls-122140-jdk8-rhel76;Oracle:weblogic-122140-jdk8-rhel76:owls-122140-jdk8-rhel76;latest",
				"owls-141100-jdk8-rhel76;Oracle:weblogic-141100-jdk8-rhel76:owls-141100-jdk8-rhel76;latest",
				"owls-141100-jdk11-rhel76;Oracle:weblogic-141100-jdk11-rhel76:owls-141100-jdk11-rhel76;latest"
			],
			"metadata": {
				"description": "The Oracle Linux image with Weblogic and Java preinstalled. Semicolon separated string of Sku, URN, and Version"
			}
		},
		"ohsSSLConfigAccessOption": {
			"type": "string",
			"metadata": {
				"description": "Options to provide required configuration for SSL configuration"
			},
			"allowedValues": [
				"uploadConfig",
				"keyVaultStoredConfig"
			],
			"defaultValue": "keyVaultStoredConfig"
		},
		"usePreviewImage": {
			"type": "bool",
			"defaultValue": false,
			"metadata": {
				"description": "Bool value, if it's set to true, will deploy with preview weblogic image."
			}
		},
		"useSystemAssignedManagedIdentity": {
			"type": "bool",
			"defaultValue": true,
			"metadata": {
				"description": "Bool value, if it's set to true, a system assigned managed identity will to be created for the VM(s)"
			}
		},
		"uploadedKeyStoreData": {
			"defaultValue": "",
			"type": "securestring",
			"metadata": {
				"description": "SSL Certificate Data for OHS"
			}
		},
		"uploadedKeyStorePassword": {
			"defaultValue": "[newGuid()]",
			"type": "securestring",
			"metadata": {
				"description": "Password of the SSL Certificate Data for OHS"
			}
		},
		"uploadedKeyStoreType": {
			"defaultValue": "PKCS12",
			"type": "string",
			"metadata": {
				"description": "SSL Certificate Data type"
			}
		},
		"vmSizeSelect": {
			"defaultValue": "Standard_A2_v2",
			"type": "string",
			"metadata": {
				"description": "Select appropriate VM Size as per requirement"
			}
		},
		"vmSizeSelectForCoherence": {
			"defaultValue": "Standard_A2_v2",
			"type": "string",
			"metadata": {
				"description": "Select appropriate VM Size for Coherence"
			}
		},
		"virtualNetworkNewOrExisting": {
			"type": "string",
			"defaultValue": "new",
			"allowedValues": [
				"new",
				"existing"
			],
			"metadata": {
				"description": "Specify whether to create a new or existing virtual network for the VM."
			}
		},
		"virtualNetworkName": {
			"type": "string",
			"defaultValue": "wls-vnet",
			"metadata": {
				"description": "Name of the existing or new VNET"
			}
		},
		"virtualNetworkResourceGroupName": {
			"type": "string",
			"defaultValue": "[resourceGroup().name]",
			"metadata": {
				"description": "Resource group of Virtual network"
			}
		},
		"addressPrefixes": {
			"type": "array",
			"defaultValue": [
				"10.0.0.0/16"
			],
			"metadata": {
				"description": "Address prefix of the VNET."
			}
		},
		"subnetName": {
			"type": "string",
			"defaultValue": "wls-subnet",
			"metadata": {
				"description": "Name of the existing or new Subnet"
			}
		},
		"subnetPrefix": {
			"type": "string",
			"defaultValue": "10.0.0.0/24",
			"metadata": {
				"description": "Address prefix of the subnet"
			}
		},
		"wlsDomainName": {
			"defaultValue": "wlsd",
			"type": "string",
			"metadata": {
				"description": "Provide Weblogic domain name"
			}
		},
		"wlsLDAPGroupBaseDN": {
			"defaultValue": "",
			"type": "securestring",
			"metadata": {
				"description": "The base distinguished name (DN) of the tree in the LDAP directory that contains groups."
			}
		},
		"wlsLDAPPrincipal": {
			"defaultValue": "",
			"type": "securestring",
			"metadata": {
				"description": "The Distinguished Name (DN) of the LDAP user that WebLogic Server should use to connect to the LDAP server."
			}
		},
		"wlsLDAPPrincipalPassword": {
			"defaultValue": "[newGuid()]",
			"type": "securestring",
			"metadata": {
				"description": "The credential (usually a password) used to connect to the LDAP server."
			}
		},
		"wlsLDAPProviderName": {
			"defaultValue": "AzureActiveDirectoryProvider",
			"type": "string",
			"metadata": {
				"description": "The value used for creating authentication provider name of WebLogic Server."
			}
		},
		"wlsLDAPSSLCertificate": {
			"defaultValue": "",
			"type": "securestring",
			"metadata": {
				"description": "Client certificate that will be imported to trust store of SSL."
			}
		},
		"wlsLDAPUserBaseDN": {
			"defaultValue": "",
			"type": "securestring",
			"metadata": {
				"description": "The base distinguished name (DN) of the tree in the LDAP directory that contains users."
			}
		},
		"wlsPassword": {
			"type": "securestring",
			"metadata": {
				"description": "Password for your Weblogic domain name"
			}
		},
		"wlsUserName": {
			"defaultValue": "weblogic",
			"type": "string",
			"metadata": {
				"description": "Username for your Weblogic domain name"
			}
		},
		"enableHTTPAdminListenPort": {
			"defaultValue": true,
			"type": "bool",
			"metadata": {
				"description": "Boolean value indicating, if WebLogic Admin Server HTTP Listen Port is enabled or not"
			}
		},
		"enableCustomSSL": {
			"defaultValue": false,
			"type": "bool",
			"metadata": {
				"description": "Boolean value indicating, if custom SSL is enabled or not"
			}
		},
		"adminSSLKeyVaultResourceGroup": {
			"defaultValue": "",
			"type": "string",
			"metadata": {
				"description": "Resource group name in current subscription containing the KeyVault for SSL Configuration of WebLogic Administration Server"
			}
		},
		"adminSSLKeyVaultName": {
			"defaultValue": "",
			"type": "string",
			"metadata": {
				"description": "KeyVault Name for SSL Configuration of WebLogic Administration Server"
			}
		},
		"keyVaultCustomIdentityKeyStoreDataSecretName": {
			"type": "string",
			"metadata": {
				"description": "Secret name in KeyVault containing Weblogic Custom Identity Keystore Data"
			},
			"defaultValue": "CustomIdentityKeyStoreDataSecret"
		},
		"keyVaultCustomIdentityKeyStorePassPhraseSecretName": {
			"type": "string",
			"metadata": {
				"description": "Secret name in KeyVault containing Weblogic Custom Identity Keystore Passphrase"
			},
			"defaultValue": "CustomIdentityKeyStorePassPhraseSecret"
		},
		"keyVaultCustomIdentityKeyStoreType": {
			"type": "string",
			"metadata": {
				"description": "Weblogic Custom Identity Keystore Type"
			},
			"defaultValue": "JKS"
		},
		"keyVaultCustomTrustKeyStoreDataSecretName": {
			"type": "string",
			"metadata": {
				"description": "Secret name in KeyVault containing Weblogic Custom Trust Store Data"
			},
			"defaultValue": "CustomTrustStoreDataSecret"
		},
		"keyVaultCustomTrustKeyStorePassPhraseSecretName": {
			"type": "string",
			"metadata": {
				"description": "Secret name in KeyVault containing Weblogic Custom Trust Store Passphrase"
			},
			"defaultValue": "CustomTrustStorePassPhraseSecret"
		},
		"keyVaultCustomTrustKeyStoreType": {
			"type": "string",
			"metadata": {
				"description": "Weblogic Custom Trust Store Type"
			},
			"defaultValue": "JKS"
		},
		"keyVaultPrivateKeyAliasSecretName": {
			"type": "string",
			"metadata": {
				"description": "Secret name in KeyVault containing Weblogic Server Private  Key Alias"
			},
			"defaultValue": "ServerPrivateKeyAlias"
		},
		"keyVaultPrivateKeyPassPhraseSecretName": {
			"type": "string",
			"metadata": {
				"description": "Secret name in KeyVault containing Weblogic Server Private  KeyPassPhrase"
			},
			"defaultValue": "ServerPrivateKeyPassPhraseSecret"
		},
		"utcValue": {
			"type": "string",
			"defaultValue": "[utcNow()]",
			"metadata": {
				"description": "Current deployment time. Used as a tag in deployment script."
			}
		}
	},
	"variables": {
		"const_ohsSSLConfigAccessOptionUploadConfig": "uploadConfig",
		"const_ohsSSLConfigAccessOptionKeyVaultStoredConfig": "keyVaultStoredConfig",
		"const_sslConfigurationAccessOptionUploadConfig": "uploadConfig",
		"const_sslConfigurationAccessOptionKeyVaultStoredConfig": "keyVaultStoredConfig",
		"const_currentSubscription": "[subscription().subscriptionId]",
		"name_aadLinkedTemplateName": "aadNestedTemplate.json",
		"name_clusterLinkedTemplateName": "clusterTemplate.json",
		"name_clusterCustomSSLLinkedTemplateName": "clusterCustomSSLTemplate.json",
		"name_dbLinkedTemplateName": "dbTemplate.json",
		"name_dnszonesLinkedTemplateName": "dnszonesTemplate.json",
		"name_elkLinkedTemplateName": "elkNestedTemplate.json",
		"name_coherenceTemplateName": "coherenceTemplate.json",
		"name_ohsLinkedTemplateName": "ohsNestedTemplate.json",
		"name_nsgLinkedTemplateName": "nsgNestedTemplate.json",
		"clusterTemplateRef": "[concat('cluster',if(parameters('enableCustomSSL'),'CustomSSL',''),'LinkedTemplate')]",
		"name_clusterTemplate": "clusterLinkedTemplate",
		"name_clusterCustomSSLTemplate": "clusterCustomSSLLinkedTemplate",
		"name_ohsKeyVaultNestedTemplate": "_ohsKeyVaultNestedTemplate.json",
		"name_keyVaultNestedTemplate": "_sslKeyVaultNestedTemplate.json",
		"name_keyVaultName": "[take(concat('wls-kv', uniqueString(parameters('utcValue'))), 24)]"
	},
	"resources": [
		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "${azure.apiVersion}",
			"name": "${dynamic.start}",
			"properties": {
				"mode": "Incremental",
				"template": {
					"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
					"contentVersion": "1.0.0.0",
					"resources": []
				}
			}
		},
		{
			"name": "keyVaultNestedTemplate",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "${azure.apiVersion}",
			"condition": "[and(parameters('enableCustomSSL'), equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionUploadConfig')))]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_keyVaultNestedTemplate')))]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"uploadedCustomIdentityKeyStoreData": {
						"value": "[parameters('uploadedCustomIdentityKeyStoreData')]"
					},
					"uploadedCustomIdentityKeyStorePassphrase": {
						"value": "[parameters('uploadedCustomIdentityKeyStorePassphrase')]"
					},
					"uploadedCustomTrustKeyStoreData": {
						"value": "[parameters('uploadedCustomTrustKeyStoreData')]"
					},
					"uploadedCustomTrustKeyStorePassPhrase": {
						"value": "[parameters('uploadedCustomTrustKeyStorePassPhrase')]"
					},
					"uploadedPrivateKeyAlias": {
						"value": "[parameters('uploadedPrivateKeyAlias')]"
					},
					"uploadedPrivateKeyPassPhrase": {
						"value": "[parameters('uploadedPrivateKeyPassPhrase')]"
					},
					"enabledForTemplateDeployment": {
						"value": "[parameters('enabledForTemplateDeployment')]"
					},
					"location": {
						"value": "[parameters('location')]"
					},
					"sku": {
						"value": "[parameters('keyVaultSku')]"
					},
					"keyVaultName": {
						"value": "[variables('name_keyVaultName')]"
					}
				}
			}
		},
		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "${azure.apiVersion}",
			"name": "[variables('name_clusterTemplate')]",
			"condition": "[not(parameters('enableCustomSSL'))]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_clusterLinkedTemplateName')))]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"adminPasswordOrKey": {
						"value": "[parameters('adminPasswordOrKey')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"adminVMName": {
						"value": "[parameters('adminVMName')]"
					},
					"authenticationType": {
						"value": "[parameters('authenticationType')]"
					},
					"addressPrefixes": {
						"value": "[parameters('addressPrefixes')]"
					},
					"dnsLabelPrefix": {
						"value": "[parameters('dnsLabelPrefix')]"
					},
					"dynamicClusterSize": {
						"value": "[parameters('dynamicClusterSize')]"
					},
					"location": {
						"value": "[parameters('location')]"
					},
					"managedServerPrefix": {
						"value": "[parameters('managedServerPrefix')]"
					},
					"maxDynamicClusterSize": {
						"value": "[parameters('maxDynamicClusterSize')]"
					},
					"portsToExpose": {
						"value": "[parameters('portsToExpose')]"
					},
					"skuUrnVersion": {
						"value": "[parameters('skuUrnVersion')]"
					},
					"subnetName": {
						"value": "[parameters('subnetName')]"
					},
					"subnetPrefix": {
						"value": "[parameters('subnetPrefix')]"
					},
					"usePreviewImage": {
						"value": "[parameters('usePreviewImage')]"
					},
					"useSystemAssignedManagedIdentity": {
						"value": "[parameters('useSystemAssignedManagedIdentity')]"
					},
					"vmSizeSelect": {
						"value": "[parameters('vmSizeSelect')]"
					},
					"virtualNetworkNewOrExisting": {
						"value": "[parameters('virtualNetworkNewOrExisting')]"
					},
					"virtualNetworkName": {
						"value": "[parameters('virtualNetworkName')]"
					},
					"virtualNetworkResourceGroupName": {
						"value": "[parameters('virtualNetworkResourceGroupName')]"
					},
					"wlsDomainName": {
						"value": "[parameters('wlsDomainName')]"
					},
					"wlsPassword": {
						"value": "[parameters('wlsPassword')]"
					},
					"wlsUserName": {
						"value": "[parameters('wlsUserName')]"
					},
					"enableHTTPAdminListenPort": {
						"value": "[parameters('enableHTTPAdminListenPort')]"
					},
					"enableDNSConfiguration": {
						"value": "[parameters('enableCustomDNS')]"
					},
					"customDNSNameForAdminServer": {
						"value": "[if(parameters('enableCustomDNS'), format('{0}.{1}', parameters('dnszoneAdminConsoleLabel'),parameters('dnszoneName')),'')]"
					}
				}
			}
		},
		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "${azure.apiVersion}",
			"name": "[variables('name_clusterCustomSSLTemplate')]",
			"condition": "[parameters('enableCustomSSL')]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_clusterCustomSSLLinkedTemplateName')))]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"adminPasswordOrKey": {
						"value": "[parameters('adminPasswordOrKey')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"adminVMName": {
						"value": "[parameters('adminVMName')]"
					},
					"authenticationType": {
						"value": "[parameters('authenticationType')]"
					},
					"addressPrefixes": {
						"value": "[parameters('addressPrefixes')]"
					},
					"dnsLabelPrefix": {
						"value": "[parameters('dnsLabelPrefix')]"
					},
					"dynamicClusterSize": {
						"value": "[parameters('dynamicClusterSize')]"
					},
					"location": {
						"value": "[parameters('location')]"
					},
					"managedServerPrefix": {
						"value": "[parameters('managedServerPrefix')]"
					},
					"maxDynamicClusterSize": {
						"value": "[parameters('maxDynamicClusterSize')]"
					},
					"portsToExpose": {
						"value": "[parameters('portsToExpose')]"
					},
					"skuUrnVersion": {
						"value": "[parameters('skuUrnVersion')]"
					},
					"subnetName": {
						"value": "[parameters('subnetName')]"
					},
					"subnetPrefix": {
						"value": "[parameters('subnetPrefix')]"
					},
					"usePreviewImage": {
						"value": "[parameters('usePreviewImage')]"
					},
					"useSystemAssignedManagedIdentity": {
						"value": "[parameters('useSystemAssignedManagedIdentity')]"
					},
					"vmSizeSelect": {
						"value": "[parameters('vmSizeSelect')]"
					},
					"virtualNetworkNewOrExisting": {
						"value": "[parameters('virtualNetworkNewOrExisting')]"
					},
					"virtualNetworkName": {
						"value": "[parameters('virtualNetworkName')]"
					},
					"virtualNetworkResourceGroupName": {
						"value": "[parameters('virtualNetworkResourceGroupName')]"
					},
					"wlsDomainName": {
						"value": "[parameters('wlsDomainName')]"
					},
					"wlsPassword": {
						"value": "[parameters('wlsPassword')]"
					},
					"wlsUserName": {
						"value": "[parameters('wlsUserName')]"
					},
					"enableHTTPAdminListenPort": {
						"value": "[parameters('enableHTTPAdminListenPort')]"
					},
					"enableDNSConfiguration": {
						"value": "[parameters('enableCustomDNS')]"
					},
					"customDNSNameForAdminServer": {
						"value": "[if(parameters('enableCustomDNS'), format('{0}.{1}', parameters('dnszoneAdminConsoleLabel'),parameters('dnszoneName')),'')]"
					},
					"enableCustomSSL": {
						"value": "[parameters('enableCustomSSL')]"
					},
					"keyVaultCustomIdentityKeyStoreData": {
						"reference": {
							"keyVault": {
								"id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultName'),reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
							},
							"secretName": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultCustomIdentityKeyStoreDataSecretName'),reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.customIdentityKeyStoreDataSecretName.value)]"
						}
					},
					"keyVaultCustomIdentityKeyStorePassPhrase": {
						"reference": {
							"keyVault": {
								"id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultName'),reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
							},
							"secretName": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultCustomIdentityKeyStorePassPhraseSecretName'), reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.customIdentityKeyStorePassPhraseSecretName.value)]"
						}
					},
					"keyVaultCustomIdentityKeyStoreType": {
						"value": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultCustomIdentityKeyStoreType'), parameters('uploadedCustomIdentityKeyStoreType'))]"
					},
					"keyVaultCustomTrustKeyStoreData": {
						"reference": {
							"keyVault": {
								"id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultName'),reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
							},
							"secretName": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultCustomTrustKeyStoreDataSecretName'), reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.customTrustKeyStoretDataSecretName.value)]"
						}
					},
					"keyVaultCustomTrustKeyStorePassPhrase": {
						"reference": {
							"keyVault": {
								"id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultName'),reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
							},
							"secretName": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultCustomTrustKeyStorePassPhraseSecretName'), reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.customTrustKeyStorePassPhraseSecretName.value)]"
						}
					},
					"keyVaultCustomTrustKeyStoreType": {
						"value": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultCustomTrustKeyStoreType'), parameters('uploadedCustomTrustKeyStoreType'))]"
					},
					"keyVaultPrivateKeyAlias": {
						"reference": {
							"keyVault": {
								"id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultName'),reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
							},
							"secretName": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultPrivateKeyAliasSecretName'), reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.privateKeyAliasSecretName.value)]"
						}
					},
					"keyVaultPrivateKeyPassPhrase": {
						"reference": {
							"keyVault": {
								"id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultName'),reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
							},
							"secretName": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultPrivateKeyPassPhraseSecretName'), reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.privateKeyPassPhraseSecretName.value)]"
						}
					}
				}
			},
			"dependsOn": [
				"[resourceId('Microsoft.Resources/deployments', 'keyVaultNestedTemplate')]"
			]
		},
		{
			"name": "ohsKeyVaultNestedTemplate",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "${azure.apiVersion}",
			"condition": "[and(parameters('enableOHS'), equals(parameters('ohsSSLConfigAccessOption'), variables('const_ohsSSLConfigAccessOptionUploadConfig')))]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_ohsKeyVaultNestedTemplate')))]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"uploadedKeyStoreData": {
						"value": "[parameters('uploadedKeyStoreData')]"
					},
					"uploadedKeyStorePassword": {
						"value": "[parameters('uploadedKeyStorePassword')]"
					},
					"location": {
						"value": "[parameters('location')]"
					},
					"sku": {
						"value": "[parameters('keyVaultSku')]"
					},
					"keyVaultName": {
						"value": "[variables('name_keyVaultName')]"
					}
				}
			},
			"dependsOn": [
				"[resourceId('Microsoft.Resources/deployments', 'keyVaultNestedTemplate')]"
			]
		},
		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "${azure.apiVersion}",
			"condition": "[equals(parameters('virtualNetworkNewOrExisting'), 'new')]",
			"name": "networkSecurityLinkedTemplate",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_nsgLinkedTemplateName')))]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"denyPublicTrafficForAdminServer": {
						"value": "[parameters('denyPublicTrafficForAdminServer')]"
					},
					"denyPublicTrafficForManagedServer": {
						"value": "[parameters('denyPublicTrafficForManagedServer')]"
					},
					"enableOHS": {
						"value": "[parameters('enableOHS')]"
					},
					"networkSecurityGroupName": {
						"value": "[concat(parameters('dnsLabelPrefix'), '-nsg')]"
					}
				}
			},
			"dependsOn": [
				"[resourceId('Microsoft.Resources/deployments', variables('clusterTemplateRef'))]",
				"[resourceId('Microsoft.Resources/deployments', 'ohsLinkedTemplate')]"
			]
		},
		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "${azure.apiVersion}",
			"name": "dbLinkedTemplate",
			"condition": "[parameters('enableDB')]",
			"dependsOn": [
				"[resourceId('Microsoft.Resources/deployments', variables('clusterTemplateRef'))]"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_dbLinkedTemplateName')))]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"adminVMName": {
						"value": "[parameters('adminVMName')]"
					},
					"databaseType": {
						"value": "[parameters('databaseType')]"
					},
					"dbGlobalTranPro": {
						"value": "[parameters('dbGlobalTranPro')]"
					},
					"dbPassword": {
						"value": "[parameters('dbPassword')]"
					},
					"dbUser": {
						"value": "[parameters('dbUser')]"
					},
					"dsConnectionURL": {
						"value": "[parameters('dsConnectionURL')]"
					},
					"jdbcDataSourceName": {
						"value": "[parameters('jdbcDataSourceName')]"
					},
					"location": {
						"value": "[parameters('location')]"
					},
					"wlsPassword": {
						"value": "[parameters('wlsPassword')]"
					},
					"wlsUserName": {
						"value": "[parameters('wlsUserName')]"
					}
				}
			}
		},
		{
			"name": "aadLinkedTemplate",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "${azure.apiVersion}",
			"dependsOn": [
				"[resourceId('Microsoft.Resources/deployments', 'dbLinkedTemplate')]"
			],
			"condition": "[and(parameters('enableAAD'),not(parameters('enableCustomSSL')))]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_aadLinkedTemplateName')))]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"aadsPortNumber": {
						"value": "[parameters('aadsPortNumber')]"
					},
					"aadsPublicIP": {
						"value": "[parameters('aadsPublicIP')]"
					},
					"aadsServerHost": {
						"value": "[parameters('aadsServerHost')]"
					},
					"adminVMName": {
						"value": "[parameters('adminVMName')]"
					},
					"location": {
						"value": "[parameters('location')]"
					},
					"managedServerPrefix": {
						"value": "[parameters('managedServerPrefix')]"
					},
					"dynamicClusterSize": {
						"value": "[parameters('dynamicClusterSize')]"
					},
					"wlsDomainName": {
						"value": "[parameters('wlsDomainName')]"
					},
					"wlsLDAPGroupBaseDN": {
						"value": "[parameters('wlsLDAPGroupBaseDN')]"
					},
					"wlsLDAPPrincipal": {
						"value": "[parameters('wlsLDAPPrincipal')]"
					},
					"wlsLDAPPrincipalPassword": {
						"value": "[parameters('wlsLDAPPrincipalPassword')]"
					},
					"wlsLDAPProviderName": {
						"value": "[parameters('wlsLDAPProviderName')]"
					},
					"wlsLDAPSSLCertificate": {
						"value": "[parameters('wlsLDAPSSLCertificate')]"
					},
					"wlsLDAPUserBaseDN": {
						"value": "[parameters('wlsLDAPUserBaseDN')]"
					},
					"wlsPassword": {
						"value": "[parameters('wlsPassword')]"
					},
					"wlsUserName": {
						"value": "[parameters('wlsUserName')]"
					}
				}
			}
		},
		{
			"name": "aadLinkedTemplateWithCustomSSL",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "${azure.apiVersion}",
			"dependsOn": [
				"[resourceId('Microsoft.Resources/deployments', 'dbLinkedTemplate')]",
				"[resourceId('Microsoft.Resources/deployments', 'keyVaultNestedTemplate')]"
			],
			"condition": "[and(parameters('enableAAD'),parameters('enableCustomSSL'))]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_aadLinkedTemplateName')))]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"aadsPortNumber": {
						"value": "[parameters('aadsPortNumber')]"
					},
					"aadsPublicIP": {
						"value": "[parameters('aadsPublicIP')]"
					},
					"aadsServerHost": {
						"value": "[parameters('aadsServerHost')]"
					},
					"adminVMName": {
						"value": "[parameters('adminVMName')]"
					},
					"location": {
						"value": "[parameters('location')]"
					},
					"managedServerPrefix": {
						"value": "[parameters('managedServerPrefix')]"
					},
					"dynamicClusterSize": {
						"value": "[parameters('dynamicClusterSize')]"
					},
					"wlsDomainName": {
						"value": "[parameters('wlsDomainName')]"
					},
					"wlsLDAPGroupBaseDN": {
						"value": "[parameters('wlsLDAPGroupBaseDN')]"
					},
					"wlsLDAPPrincipal": {
						"value": "[parameters('wlsLDAPPrincipal')]"
					},
					"wlsLDAPPrincipalPassword": {
						"value": "[parameters('wlsLDAPPrincipalPassword')]"
					},
					"wlsLDAPProviderName": {
						"value": "[parameters('wlsLDAPProviderName')]"
					},
					"wlsLDAPSSLCertificate": {
						"value": "[parameters('wlsLDAPSSLCertificate')]"
					},
					"wlsLDAPUserBaseDN": {
						"value": "[parameters('wlsLDAPUserBaseDN')]"
					},
					"wlsPassword": {
						"value": "[parameters('wlsPassword')]"
					},
					"wlsUserName": {
						"value": "[parameters('wlsUserName')]"
					},
					"enableCustomSSL": {
						"value": "[parameters('enableCustomSSL')]"
					},
					"keyVaultCustomTrustKeyStorePassPhrase": {
						"reference": {
							"keyVault": {
								"id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultName'),reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
							},
							"secretName": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultCustomTrustKeyStorePassPhraseSecretName'), reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.customTrustKeyStorePassPhraseSecretName.value)]"
						}
					},
					"keyVaultCustomTrustKeyStoreType": {
						"value": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultCustomTrustKeyStoreType'), parameters('uploadedCustomTrustKeyStoreType'))]"
					}
				}
			}
		},
		{
			"name": "elkLinkedTemplate",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "${azure.apiVersion}",
			"dependsOn": [
				"[resourceId('Microsoft.Resources/deployments', 'aadLinkedTemplate')]",
				"[resourceId('Microsoft.Resources/deployments', 'aadLinkedTemplateWithCustomSSL')]"
			],
			"condition": "[parameters('enableELK')]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_elkLinkedTemplateName')))]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"adminVMName": {
						"value": "[parameters('adminVMName')]"
					},
					"elasticsearchEndpoint": {
						"value": "[parameters('elasticsearchEndpoint')]"
					},
					"elasticsearchPassword": {
						"value": "[parameters('elasticsearchPassword')]"
					},
					"elasticsearchUserName": {
						"value": "[parameters('elasticsearchUserName')]"
					},
					"location": {
						"value": "[parameters('location')]"
					},
					"logsToIntegrate": {
						"value": "[parameters('logsToIntegrate')]"
					},
					"managedServerPrefix": {
						"value": "[parameters('managedServerPrefix')]"
					},
					"maxDynamicClusterSize": {
						"value": "[parameters('maxDynamicClusterSize')]"
					},
					"numberOfManagedApplicationInstances": {
						"value": "[parameters('dynamicClusterSize')]"
					},
					"wlsDomainName": {
						"value": "[parameters('wlsDomainName')]"
					},
					"wlsPassword": {
						"value": "[parameters('wlsPassword')]"
					},
					"wlsUserName": {
						"value": "[parameters('wlsUserName')]"
					}
				}
			}
		},
		{
			"name": "coherenceTemplate",
			"type": "Microsoft.Resources/deployments",
			"dependsOn": [
				"[resourceId('Microsoft.Resources/deployments', 'elkLinkedTemplate')]"
			],
			"apiVersion": "${azure.apiVersion}",
			"condition": "[and(parameters('enableCoherence'),not(parameters('enableCustomSSL')))]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_coherenceTemplateName')))]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"adminPasswordOrKey": {
						"value": "[parameters('adminPasswordOrKey')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"authenticationType": {
						"value": "[parameters('authenticationType')]"
					},
					"adminVMName": {
						"value": "[parameters('adminVMName')]"
					},
					"dnsLabelPrefix": {
						"value": "[parameters('dnsLabelPrefix')]"
					},
					"elasticsearchEndpoint": {
						"value": "[parameters('elasticsearchEndpoint')]"
					},
					"elasticsearchPassword": {
						"value": "[parameters('elasticsearchPassword')]"
					},
					"elasticsearchUserName": {
						"value": "[parameters('elasticsearchUserName')]"
					},
					"enableCoherenceWebLocalStorage": {
						"value": "[parameters('enableCoherenceWebLocalStorage')]"
					},
					"enableELK": {
						"value": "[parameters('enableELK')]"
					},
					"location": {
						"value": "[parameters('location')]"
					},
					"logIndex": {
						"value": "[if(parameters('enableELK'), reference('elkLinkedTemplate', '${azure.apiVersion}').outputs.logIndex.value, '')]"
					},
					"logsToIntegrate": {
						"value": "[parameters('logsToIntegrate')]"
					},
					"managedServerPrefix": {
						"value": "[parameters('managedServerPrefix')]"
					},
					"numberOfCoherenceCacheInstances": {
						"value": "[parameters('numberOfCoherenceCacheInstances')]"
					},
					"skuUrnVersion": {
						"value": "[parameters('skuUrnVersion')]"
					},
					"subnetName": {
						"value": "[parameters('subnetName')]"
					},
					"storageAccountName": {
						"value": "[reference(variables('clusterTemplateRef'), '${azure.apiVersion}').outputs.storageAccountName.value]"
					},
					"usePreviewImage": {
						"value": "[parameters('usePreviewImage')]"
					},
					"vmSizeSelectForCoherence": {
						"value": "[parameters('vmSizeSelectForCoherence')]"
					},
					"virtualNetworkResourceGroupName": {
						"value": "[parameters('virtualNetworkResourceGroupName')]"
					},
					"virtualNetworkName": {
						"value": "[parameters('virtualNetworkName')]"
					},
					"wlsDomainName": {
						"value": "[parameters('wlsDomainName')]"
					},
					"wlsPassword": {
						"value": "[parameters('wlsPassword')]"
					},
					"wlsUserName": {
						"value": "[parameters('wlsUserName')]"
					},
					"enableCustomSSL": {
						"value": "[parameters('enableCustomSSL')]"
					},
					"enableDNSConfiguration": {
						"value": "[parameters('enableCustomDNS')]"
					},
					"customDNSNameForAdminServer": {
						"value": "[if(parameters('enableCustomDNS'), format('{0}.{1}', parameters('dnszoneAdminConsoleLabel'),parameters('dnszoneName')),'')]"
					}
				}
			}
		},
		{
			"name": "coherenceTemplateWithCustomSSL",
			"type": "Microsoft.Resources/deployments",
			"dependsOn": [
				"[resourceId('Microsoft.Resources/deployments', 'elkLinkedTemplate')]"
			],
			"apiVersion": "${azure.apiVersion}",
			"condition": "[and(parameters('enableCoherence'),parameters('enableCustomSSL'))]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_coherenceTemplateName')))]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"adminPasswordOrKey": {
						"value": "[parameters('adminPasswordOrKey')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"authenticationType": {
						"value": "[parameters('authenticationType')]"
					},
					"adminVMName": {
						"value": "[parameters('adminVMName')]"
					},
					"dnsLabelPrefix": {
						"value": "[parameters('dnsLabelPrefix')]"
					},
					"elasticsearchEndpoint": {
						"value": "[parameters('elasticsearchEndpoint')]"
					},
					"elasticsearchPassword": {
						"value": "[parameters('elasticsearchPassword')]"
					},
					"elasticsearchUserName": {
						"value": "[parameters('elasticsearchUserName')]"
					},
					"enableCoherenceWebLocalStorage": {
						"value": "[parameters('enableCoherenceWebLocalStorage')]"
					},
					"enableELK": {
						"value": "[parameters('enableELK')]"
					},
					"location": {
						"value": "[parameters('location')]"
					},
					"logIndex": {
						"value": "[if(parameters('enableELK'), reference('elkLinkedTemplate', '${azure.apiVersion}').outputs.logIndex.value, '')]"
					},
					"logsToIntegrate": {
						"value": "[parameters('logsToIntegrate')]"
					},
					"managedServerPrefix": {
						"value": "[parameters('managedServerPrefix')]"
					},
					"numberOfCoherenceCacheInstances": {
						"value": "[parameters('numberOfCoherenceCacheInstances')]"
					},
					"skuUrnVersion": {
						"value": "[parameters('skuUrnVersion')]"
					},
					"storageAccountName": {
						"value": "[reference(variables('clusterTemplateRef'), '${azure.apiVersion}').outputs.storageAccountName.value]"
					},
					"usePreviewImage": {
						"value": "[parameters('usePreviewImage')]"
					},
					"vmSizeSelectForCoherence": {
						"value": "[parameters('vmSizeSelectForCoherence')]"
					},
					"wlsDomainName": {
						"value": "[parameters('wlsDomainName')]"
					},
					"wlsPassword": {
						"value": "[parameters('wlsPassword')]"
					},
					"wlsUserName": {
						"value": "[parameters('wlsUserName')]"
					},
					"enableDNSConfiguration": {
						"value": "[parameters('enableCustomDNS')]"
					},
					"customDNSNameForAdminServer": {
						"value": "[if(parameters('enableCustomDNS'), format('{0}.{1}', parameters('dnszoneAdminConsoleLabel'),parameters('dnszoneName')),'')]"
					},
					"enableCustomSSL": {
						"value": "[parameters('enableCustomSSL')]"
					},
					"keyVaultCustomIdentityKeyStoreData": {
						"reference": {
							"keyVault": {
								"id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultName'),reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
							},
							"secretName": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultCustomIdentityKeyStoreDataSecretName'),reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.customIdentityKeyStoreDataSecretName.value)]"
						}
					},
					"keyVaultCustomIdentityKeyStorePassPhrase": {
						"reference": {
							"keyVault": {
								"id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultName'),reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
							},
							"secretName": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultCustomIdentityKeyStorePassPhraseSecretName'), reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.customIdentityKeyStorePassPhraseSecretName.value)]"
						}
					},
					"keyVaultCustomIdentityKeyStoreType": {
						"value": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultCustomIdentityKeyStoreType'), parameters('uploadedCustomIdentityKeyStoreType'))]"
					},
					"keyVaultCustomTrustKeyStoreData": {
						"reference": {
							"keyVault": {
								"id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultName'),reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
							},
							"secretName": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultCustomTrustKeyStoreDataSecretName'), reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.customTrustKeyStoretDataSecretName.value)]"
						}
					},
					"keyVaultCustomTrustKeyStorePassPhrase": {
						"reference": {
							"keyVault": {
								"id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultName'),reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
							},
							"secretName": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultCustomTrustKeyStorePassPhraseSecretName'), reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.customTrustKeyStorePassPhraseSecretName.value)]"
						}
					},
					"keyVaultCustomTrustKeyStoreType": {
						"value": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultCustomTrustKeyStoreType'), parameters('uploadedCustomTrustKeyStoreType'))]"
					},
					"keyVaultPrivateKeyAlias": {
						"reference": {
							"keyVault": {
								"id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultName'),reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
							},
							"secretName": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultPrivateKeyAliasSecretName'), reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.privateKeyAliasSecretName.value)]"
						}
					},
					"keyVaultPrivateKeyPassPhrase": {
						"reference": {
							"keyVault": {
								"id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultName'),reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
							},
							"secretName": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultPrivateKeyPassPhraseSecretName'), reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.privateKeyPassPhraseSecretName.value)]"
						}
					}
				}
			}
		},
		{
			"name": "ohsLinkedTemplate",
			"type": "Microsoft.Resources/deployments",
			"dependsOn": [
				"[resourceId('Microsoft.Resources/deployments', variables('clusterTemplateRef'))]",
				"[resourceId('Microsoft.Resources/deployments', 'coherenceTemplate')]",
				"[resourceId('Microsoft.Resources/deployments', 'coherenceTemplateWithCustomSSL')]",
				"[resourceId('Microsoft.Resources/deployments', 'ohsKeyVaultNestedTemplate')]"
			],
			"apiVersion": "${azure.apiVersion}",
			"condition": "[parameters('enableOHS')]",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_ohsLinkedTemplateName')))]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"adminPasswordOrKey": {
						"value": "[parameters('adminPasswordOrKey')]"
					},
					"authenticationType": {
						"value": "[parameters('authenticationType')]"
					},
					"dnsLabelPrefix": {
						"value": "[parameters('dnsLabelPrefix')]"
					},
					"storageAccountName": {
						"value": "[reference(variables('clusterTemplateRef'),'${azure.apiVersion}').outputs.storageAccountName.value]"
					},
					"subnetName": {
						"value": "[parameters('subnetName')]"
					},
					"location": {
						"value": "[parameters('location')]"
					},
					"ohsComponentName": {
						"value": "[parameters('ohsComponentName')]"
					},
					"ohsDomainName": {
						"value": "[parameters('ohsDomainName')]"
					},
					"ohsNMPassword": {
						"value": "[parameters('ohsNMPassword')]"
					},
					"ohsNMUser": {
						"value": "[parameters('ohsNMUser')]"
					},
					"ohsSkuUrnVersion": {
						"value": "[parameters('ohsSkuUrnVersion')]"
					},
					"ohsVMName": {
						"value": "[parameters('ohsVMName')]"
					},
					"ohshttpPort": {
						"value": "[parameters('ohshttpPort')]"
					},
					"ohshttpsPort": {
						"value": "[parameters('ohshttpsPort')]"
					},
					"ohsSSLKeystoreData": {
						"reference": {
							"keyVault": {
								"id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('ohsSSLConfigAccessOption'), variables('const_ohsSSLConfigAccessOptionKeyVaultStoredConfig')),parameters('keyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('ohsSSLConfigAccessOption'), variables('const_ohsSSLConfigAccessOptionKeyVaultStoredConfig')),parameters('keyVaultName'),reference('ohsKeyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
							},
							"secretName": "[if(equals(parameters('ohsSSLConfigAccessOption'), variables('const_ohsSSLConfigAccessOptionKeyVaultStoredConfig')),parameters('keyVaultSSLCertDataSecretName'),reference('ohsKeyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyStoreDataSecretName.value)]"

						}
					},
					"ohsSSLKeystorePassword": {
						"reference": {
							"keyVault": {
								"id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('ohsSSLConfigAccessOption'), variables('const_ohsSSLConfigAccessOptionKeyVaultStoredConfig')),parameters('keyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('ohsSSLConfigAccessOption'), variables('const_ohsSSLConfigAccessOptionKeyVaultStoredConfig')),parameters('keyVaultName'),reference('ohsKeyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
							},
							"secretName": "[if(equals(parameters('ohsSSLConfigAccessOption'), variables('const_ohsSSLConfigAccessOptionKeyVaultStoredConfig')),parameters('keyVaultSSLCertPasswordSecretName'),reference('ohsKeyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyStorePwdSecretName.value)]"
						}
					},
					"oracleVaultPswd": {
						"value": "[parameters('oracleVaultPswd')]"
					},
					"virtualNetworkNewOrExisting": {
						"value": "[parameters('virtualNetworkNewOrExisting')]"
					},
					"virtualNetworkResourceGroupName": {
						"value": "[parameters('virtualNetworkResourceGroupName')]"
					},
					"virtualNetworkName": {
						"value": "[reference(variables('clusterTemplateRef'),'${azure.apiVersion}').outputs.virtualNetworkName.value]"
					},
					"vmSizeSelect": {
						"value": "[parameters('vmSizeSelect')]"
					},
					"adminRestMgmtURL": {
						"value": "[reference(variables('clusterTemplateRef'),'${azure.apiVersion}').outputs.adminRestMgmtURL.value]"
					},
					"wlsPassword": {
						"value": "[parameters('wlsPassword')]"
					},
					"wlsUserName": {
						"value": "[parameters('wlsUserName')]"
					},
					"keyType": {
						"value": "[if(equals(parameters('ohsSSLConfigAccessOption'), variables('const_ohsSSLConfigAccessOptionKeyVaultStoredConfig')),parameters('keyType'),parameters('uploadedKeyStoreType'))]"
					}
				}
			}
		},
		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "${azure.apiVersion}",
			"name": "dnszonesLinkedTemplate",
			"condition": "[parameters('enableCustomDNS')]",
			"dependsOn": [
				"[resourceId('Microsoft.Resources/deployments', 'ohsLinkedTemplate')]"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_dnszonesLinkedTemplateName')))]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"_artifactsLocation": {
						"value": "[parameters('_artifactsLocation')]"
					},
					"_artifactsLocationSasToken": {
						"value": "[parameters('_artifactsLocationSasToken')]"
					},
					"dnszonesARecordSetNames": {
						"value": "[if(parameters('enableOHS'), createArray(parameters('dnszoneAdminConsoleLabel'),parameters('dnszoneLoadBalancerLabel')), createArray(parameters('dnszoneAdminConsoleLabel')))]"
					},
					"dnszoneName": {
						"value": "[parameters('dnszoneName')]"
					},
					"hasDNSZones": {
						"value": "[parameters('hasDNSZones')]"
					},
					"location": {
						"value": "[parameters('location')]"
					},
					"resourceGroup": {
						"value": "[parameters('dnszoneResourceGroup')]"
					},
					"targetResources": {
						"value": "[if(parameters('enableOHS'), createArray(reference(variables('clusterTemplateRef'), '${azure.apiVersion}').outputs._adminPublicIPId.value, reference('ohsLinkedTemplate', '${azure.apiVersion}').outputs._ohsPublicIP.value), createArray(reference(variables('clusterTemplateRef'), '${azure.apiVersion}').outputs._adminPublicIPId.value))]"
					}
				}

			}
		},
		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "${azure.apiVersion}",
			"name": "${dynamic.end}",
			"dependsOn": [
				"[resourceId('Microsoft.Resources/deployments', variables('clusterTemplateRef'))]",
				"[resourceId('Microsoft.Resources/deployments', 'aadLinkedTemplate')]",
				"[resourceId('Microsoft.Resources/deployments', 'dbLinkedTemplate')]",
				"[resourceId('Microsoft.Resources/deployments', 'elkLinkedTemplate')]",
				"[resourceId('Microsoft.Resources/deployments', 'coherenceTemplate')]",
				"[resourceId('Microsoft.Resources/deployments', 'coherenceTemplateWithCustomSSL')]",
				"[resourceId('Microsoft.Resources/deployments', 'ohsLinkedTemplate')]",
				"[resourceId('Microsoft.Resources/deployments', 'dnszonesLinkedTemplate')]",
				"[resourceId('Microsoft.Resources/deployments', 'networkSecurityLinkedTemplate')]",
				"[resourceId('Microsoft.Resources/deployments', 'keyVaultNestedTemplate')]"
			],
			"properties": {
				"mode": "Incremental",
				"template": {
					"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
					"contentVersion": "1.0.0.0",
					"resources": []
				}
			}
		}

	],
	"outputs": {
		"wlsDomainLocation": {
			"type": "string",
			"value": "[reference(variables('clusterTemplateRef'),'${azure.apiVersion}').outputs.wlsDomainLocation.value]"
		},
		"adminHostName": {
			"type": "string",
			"value": "[reference(variables('clusterTemplateRef'),'${azure.apiVersion}').outputs.adminHostName.value]"
		},
		"adminConsole": {
			"type": "string",
			"value": "[if(parameters('enableCustomDNS'), uri(format('http://{0}.{1}:7001/console/',parameters('dnszoneAdminConsoleLabel'),parameters('dnszoneName')), ''),reference(variables('clusterTemplateRef'),'${azure.apiVersion}').outputs.adminConsole.value)]"
		},
		"adminSecuredConsole": {
			"type": "string",
			"value": "[if(parameters('enableCustomDNS'), uri(format('https://{0}.{1}:7002/console',parameters('dnszoneAdminConsoleLabel'),parameters('dnszoneName')), ''),reference(variables('clusterTemplateRef'),'${azure.apiVersion}').outputs.adminSecuredConsole.value)]"
		},
		"logIndex": {
			"type": "string",
			"condition": "[parameters('enableELK')]",
			"value": "[if(parameters('enableELK'), reference('elkLinkedTemplate', '${azure.apiVersion}').outputs.logIndex.value, '')]"
		},
		"ohsAccessURL": {
			"type": "string",
			"condition": "[parameters('enableOHS')]",
			"value": "[if(parameters('enableCustomDNS'), uri(format('http://{0}.{1}:{2}',parameters('dnszoneLoadBalancerLabel'),parameters('dnszoneName'), parameters('ohshttpPort')),''),reference('ohsLinkedTemplate', '${azure.apiVersion}').outputs.ohsAccessURL.value)]"
		},
		"ohsSecureAccessURL": {
			"type": "string",
			"condition": "[parameters('enableOHS')]",
			"value": "[if(parameters('enableCustomDNS'), uri(format('https://{0}.{1}:{2}',parameters('dnszoneLoadBalancerLabel'),parameters('dnszoneName'),parameters('ohshttpsPort')),''), reference('ohsLinkedTemplate', '${azure.apiVersion}').outputs.ohsSecureAccessURL.value)]"
		}
	}
}
