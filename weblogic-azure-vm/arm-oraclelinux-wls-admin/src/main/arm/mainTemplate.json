{
   "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
   "contentVersion": "1.0.0.0",
   "parameters": {
      "_artifactsLocation": {
         "type": "string",
         "metadata": {
            "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
         },
         "defaultValue": "[deployment().properties.templateLink.uri]"
      },
      "_artifactsLocationSasToken": {
         "type": "securestring",
         "metadata": {
            "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
         },
         "defaultValue": ""
      },
      "aadsPortNumber": {
         "type": "string",
         "defaultValue": "636",
         "metadata": {
            "description": "Accessible port of the LDAP server."
         }
      },
      "aadsPublicIP": {
         "type": "string",
         "defaultValue": "The LDAP server public IP address"
      },
      "aadsServerHost": {
         "type": "string",
         "defaultValue": "ldaps.example.com",
         "metadata": {
            "description": "The LDAP server host."
         }
      },
      "adminPasswordOrKey": {
         "type": "securestring",
         "metadata": {
            "description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
         }
      },
      "adminSSLKeyVaultName": {
         "type": "string",
         "defaultValue": "",
         "metadata": {
            "description": "Keyvault name containing Weblogic SSL Certificates"
         }
      },
      "adminSSLKeyVaultResourceGroup": {
         "type": "string",
         "defaultValue": "",
         "metadata": {
            "description": "Resource Group containing Weblogic SSL Certificates"
         }
      },
      "adminUsername": {
         "defaultValue": "weblogic",
         "type": "string",
         "metadata": {
            "description": "User name for the Virtual Machine."
         }
      },
      "adminVMName": {
         "type": "string",
         "defaultValue": "adminVM",
         "metadata": {
            "description": "Admin Server hosting VM name."
         }
      },
      "authenticationType": {
         "type": "string",
         "defaultValue": "password",
         "allowedValues": [
            "sshPublicKey",
            "password"
         ],
         "metadata": {
            "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
         }
      },
      "databaseType": {
         "defaultValue": "oracle",
         "type": "string",
         "metadata": {
            "description": "One of the supported database types"
         }
      },
      "dbGlobalTranPro": {
         "defaultValue": "OnePhaseCommit",
         "type": "string",
         "metadata": {
            "description": "Determines the transaction protocol (global transaction processing behavior) for the data source."
         }
      },
      "dbPassword": {
         "defaultValue": "",
         "type": "securestring",
         "metadata": {
            "description": "Password for Database"
         }
      },
      "dbUser": {
         "defaultValue": "",
         "type": "string",
         "metadata": {
            "description": "Userid of Database"
         }
      },
      "denyPublicTrafficForAdminServer": {
         "type": "bool",
         "defaultValue": false,
         "metadata": {
            "description": "Set 'true' to deny public inbound traffic for the admin server."
         }
      },
      "dnsLabelPrefix": {
         "defaultValue": "wls",
         "type": "string",
         "metadata": {
            "description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
         }
      },
      "dnszoneName": {
         "defaultValue": "contoso.xyz",
         "type": "string",
         "metadata": {
            "description": "Azure DNS Zone name."
         }
      },
      "dnszoneResourceGroup": {
         "type": "string",
         "defaultValue": "[resourceGroup().name]",
         "metadata": {
            "description": "Name of the resource group containing the Azure DNS Zone."
         }
      },
      "dnszoneAdminConsoleLabel": {
         "type": "string",
         "defaultValue": "console",
         "metadata": {
            "description": "Specify a label used to generate subdomain of Oracle WebLogic Administration Console. The final subdomain name will be label.dnszoneName, e.g. console.contoso.xyz"
         }
      },
      "dsConnectionURL": {
         "defaultValue": "",
         "type": "string",
         "metadata": {
            "description": "JDBC Connection String"
         }
      },
      "elasticsearchEndpoint": {
         "type": "string",
         "defaultValue": "",
         "metadata": {
            "description": "Endpoint of the Elasticsearch instance."
         }
      },
      "elasticsearchPassword": {
         "type": "securestring",
         "defaultValue": "[newGuid()]",
         "metadata": {
            "description": "The credentials to distibute message with REST API to Elasticsearch instance."
         }
      },
      "elasticsearchUserName": {
         "type": "string",
         "defaultValue": "",
         "metadata": {
            "description": "The credentials to distibute message with REST API to Elasticsearch instance."
         }
      },
      "enableAAD": {
         "type": "bool",
         "defaultValue": false,
         "metadata": {
            "description": "Bool value, if it's set to true, will enable Azure Active Directory after WebLogic Server starts."
         }
      },
      "enableDB": {
         "defaultValue": false,
         "type": "bool",
         "metadata": {
            "description": "If true, use the supplied parameters to connect the cluster to a pre-provisioned database."
         }
      },
      "enableCustomDNS": {
         "defaultValue": false,
         "type": "bool",
         "metadata": {
            "description": "Boolean value indicating, if custom DNS Name is available or not"
         }
      },
      "enableCustomSSL": {
         "defaultValue": false,
         "type": "bool",
         "metadata": {
            "description": "Boolean value indicating, if custom SSL is enabled or not"
         }
      },
      "sslConfigurationAccessOption": {
         "type": "string",
         "metadata": {
            "description": "Options to provide required configuration for SSL configuration"
         },
         "allowedValues": [
            "uploadConfig",
            "keyVaultStoredConfig"
         ],
         "defaultValue": "keyVaultStoredConfig"
      },
      "enableELK": {
         "defaultValue": false,
         "type": "bool",
         "metadata": {
            "description": "If true, use the supplied parameters to distribute WebLogic Server logs to the Elasticsearch instance."
         }
      },
      "enableHTTPAdminListenPort": {
         "defaultValue": true,
         "type": "bool",
         "metadata": {
            "description": "Boolean value indicating, if WebLogic Admin Server HTTP Listen Port is enabled or not"
         }
      },
      "hasDNSZones": {
         "type": "bool",
         "defaultValue": false,
         "metadata": {
            "description": "If true, the template will update records to the existing DNS Zone. If false, the template will create a new DNS Zone."
         }
      },
      "jdbcDataSourceName": {
         "type": "string",
         "defaultValue": "",
         "metadata": {
            "description": "JNDI Name for JDBC Datasource"
         }
      },
      "location": {
         "type": "string",
         "defaultValue": "[resourceGroup().location]",
         "metadata": {
            "description": "Location for all resources."
         }
      },
      "keyVaultCustomIdentityKeyStoreDataSecretName": {
         "type": "string",
         "metadata": {
            "description": "Secret name in KeyVault containing Weblogic Custom Identity Keystore Data"
         },
         "defaultValue": "CustomIdentityKeyStoreDataSecret"
      },
      "keyVaultCustomIdentityKeyStorePassPhraseSecretName": {
         "type": "string",
         "metadata": {
            "description": "Secret name in KeyVault containing Weblogic Custom Identity Keystore Passphrase"
         },
         "defaultValue": "CustomIdentityKeyStorePassPhraseSecret"
      },
      "keyVaultCustomIdentityKeyStoreType": {
         "type": "string",
         "metadata": {
            "description": "Weblogic Custom Identity Keystore Type"
         },
         "defaultValue": "JKS"
      },
      "keyVaultCustomTrustKeyStoreDataSecretName": {
         "type": "string",
         "metadata": {
            "description": "Secret name in KeyVault containing Weblogic Custom Trust Store Data"
         },
         "defaultValue": "CustomTrustStoreDataSecret"
      },
      "keyVaultCustomTrustKeyStorePassPhraseSecretName": {
         "type": "string",
         "metadata": {
            "description": "Secret name in KeyVault containing Weblogic Custom Trust Store Passphrase"
         },
         "defaultValue": "CustomTrustStorePassPhraseSecret"
      },
      "keyVaultCustomTrustKeyStoreType": {
         "type": "string",
         "metadata": {
            "description": "Weblogic Custom Trust Store Type"
         },
         "defaultValue": "JKS"
      },
      "keyVaultPrivateKeyAliasSecretName": {
         "type": "string",
         "metadata": {
            "description": "Secret name in KeyVault containing Weblogic Server Private  Key Alias"
         },
         "defaultValue": "ServerPrivateKeyAlias"
      },
      "keyVaultPrivateKeyPassPhraseSecretName": {
         "type": "string",
         "metadata": {
            "description": "Secret name in KeyVault containing Weblogic Server Private  KeyPassPhrase"
         },
         "defaultValue": "ServerPrivateKeyPassPhraseSecret"
      },
      "uploadedCustomIdentityKeyStoreData": {
         "type": "securestring",
         "metadata": {
            "description": "Custom Identity KeyStore Data"
         },
         "defaultValue": ""
      },
      "uploadedCustomIdentityKeyStorePassphrase": {
         "type": "securestring",
         "metadata": {
            "description": "Custom Identity KeyStore Passphrase"
         },
         "defaultValue": ""
      },
      "uploadedCustomIdentityKeyStoreType": {
         "type": "string",
         "metadata": {
            "description": "Weblogic Custom Identity Keystore Type"
         },
         "defaultValue": "JKS"
      },
      "uploadedCustomTrustKeyStoreData": {
         "type": "securestring",
         "metadata": {
            "description": "Custom Trust KeyStore Data"
         },
         "defaultValue": ""
      },
      "uploadedCustomTrustKeyStorePassPhrase": {
         "type": "securestring",
         "metadata": {
            "description": "Custom Trust KeyStore PassPhrase"
         },
         "defaultValue": ""
      },
      "uploadedCustomTrustKeyStoreType": {
         "type": "string",
         "metadata": {
            "description": "Weblogic Custom Trust Keystore Type"
         },
         "defaultValue": "JKS"
      },
      "uploadedPrivateKeyAlias": {
         "type": "string",
         "metadata": {
            "description": "Alias of the private key"
         },
         "defaultValue": "privateKeyAlias"
      },
      "uploadedPrivateKeyPassPhrase": {
         "type": "securestring",
         "metadata": {
            "description": "Password of the private key"
         },
         "defaultValue": ""
      },
      "enabledForTemplateDeployment": {
         "type": "bool",
         "metadata": {
            "description": "Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
         },
         "defaultValue": true
      },
      "keyVaultSku": {
         "defaultValue": "Standard",
         "type": "string",
         "metadata": {
            "description": "Price tier for Key Vault."
         }
      },
      "logsToIntegrate": {
         "type": "array",
         "defaultValue": [ "HTTPAccessLog", "ServerLog", "DomainLog", "DataSourceLog", "StandardErrorAndOutput" ],
         "allowedValues": [ "HTTPAccessLog", "ServerLog", "DomainLog", "DataSourceLog", "StandardErrorAndOutput" ],
         "metadata": {
            "description": "Specify the expeted logs to integrate, you must input at least one log."
         }
      },
      "portsToExpose": {
         "type": "string",
         "defaultValue": "80,443,7001-9000",
         "metadata": {
            "description": "Ports and port ranges to expose"
         }
      },
      "skuUrnVersion": {
         "type": "string",
         "defaultValue": "owls-141100-jdk11-ol76;Oracle:weblogic-141100-jdk11-ol76:owls-141100-jdk11-ol7;latest",
         "allowedValues": [
            "owls-122130-jdk8-ol73;Oracle:weblogic-122130-jdk8-ol73:owls-122130-jdk8-ol7;latest",
            "owls-122130-jdk8-ol74;Oracle:weblogic-122130-jdk8-ol74:owls-122130-jdk8-ol7;latest",
            "owls-122140-jdk8-ol76;Oracle:weblogic-122140-jdk8-ol76:owls-122140-jdk8-ol7;latest",
            "owls-141100-jdk8-ol76;Oracle:weblogic-141100-jdk8-ol76:owls-141100-jdk8-ol7;latest",
            "owls-141100-jdk11-ol76;Oracle:weblogic-141100-jdk11-ol76:owls-141100-jdk11-ol7;latest",
            "owls-122140-jdk8-rhel76;Oracle:weblogic-122140-jdk8-rhel76:owls-122140-jdk8-rhel76;latest",
            "owls-141100-jdk8-rhel76;Oracle:weblogic-141100-jdk8-rhel76:owls-141100-jdk8-rhel76;latest",
            "owls-141100-jdk11-rhel76;Oracle:weblogic-141100-jdk11-rhel76:owls-141100-jdk11-rhel76;latest"
         ],
         "metadata": {
            "description": "The Oracle Linux image with Weblogic and Java preinstalled. Semicolon separated string of Sku, URN, and Version"
         }
      },
      "usePreviewImage": {
         "type": "bool",
         "defaultValue": false,
         "metadata": {
            "description": "Bool value, if it's set to true, will deploy with preview weblogic image."
         }
      },
      "useSystemAssignedManagedIdentity": {
         "type": "bool",
         "defaultValue": true,
         "metadata": {
            "description": "Bool value, if it's set to true, a system assigned managed identity will to be created for the VM(s)"
         }
      },
      "vmSizeSelect": {
         "type": "string",
         "defaultValue": "Standard_A3",
         "metadata": {
            "description": "Select appropriate VM Size as per requirement"
         }
      },
      "virtualNetworkNewOrExisting": {
         "type": "string",
         "defaultValue": "new",
         "allowedValues": [
            "new",
            "existing"
         ],
         "metadata": {
            "description": "Specify whether to create a new or existing virtual network for the VM."
         }
      },
      "virtualNetworkName": {
         "type": "string",
         "defaultValue": "wls-vnet",
         "metadata": {
            "description": "Name of the existing or new VNET"
         }
      },
      "virtualNetworkResourceGroupName": {
         "type": "string",
         "defaultValue": "[resourceGroup().name]",
         "metadata": {
            "description": "Resource group of Virtual network"
         }
      },
      "addressPrefixes": {
         "type": "array",
         "defaultValue": [
            "10.0.0.0/28"
         ],
         "metadata": {
            "description": "Address prefix of the VNET."
         }
      },
      "subnetName": {
         "type": "string",
         "defaultValue": "wls-subnet",
         "metadata": {
            "description": "Name of the existing or new Subnet"
         }
      },
      "subnetPrefix": {
         "type": "string",
         "defaultValue": "10.0.0.0/29",
         "metadata": {
            "description": "Address prefix of the subnet"
         }
      },
      "wlsDomainName": {
         "defaultValue": "adminDomain",
         "type": "string",
         "metadata": {
            "description": "Provide Weblogic domain name"
         }
      },
      "wlsLDAPGroupBaseDN": {
         "type": "string",
         "defaultValue": "null",
         "metadata": {
            "description": "The base distinguished name (DN) of the tree in the LDAP directory that contains groups."
         }
      },
      "wlsLDAPPrincipal": {
         "type": "string",
         "defaultValue": "null",
         "metadata": {
            "description": "The Distinguished Name (DN) of the LDAP user that WebLogic Server should use to connect to the LDAP server."
         }
      },
      "wlsLDAPPrincipalPassword": {
         "type": "securestring",
         "defaultValue": "[newGuid()]",
         "metadata": {
            "description": "The credential (usually a password) used to connect to the LDAP server."
         }
      },
      "wlsLDAPProviderName": {
         "type": "string",
         "defaultValue": "AzureActiveDirectoryProvider",
         "metadata": {
            "description": "The value used for creating authentication provider name of WebLogic Server."
         }
      },
      "wlsLDAPSSLCertificate": {
         "type": "string",
         "defaultValue": "null",
         "metadata": {
            "description": "Client certificate that will be imported to trust store of SSL."
         }
      },
      "wlsLDAPUserBaseDN": {
         "type": "string",
         "defaultValue": "null",
         "metadata": {
            "description": "The base distinguished name (DN) of the tree in the LDAP directory that contains users."
         }
      },
      "wlsPassword": {
         "type": "securestring",
         "metadata": {
            "description": "Password for your Weblogic domain name"
         }
      },
      "wlsUserName": {
         "defaultValue": "weblogic",
         "type": "string",
         "metadata": {
            "description": "Username for your Weblogic domain name"
         }
      }
   },
   "variables": {
      "const_currentSubscription": "[subscription().subscriptionId]",
      "const_sslConfigurationAccessOptionUploadConfig": "uploadConfig",
      "const_sslConfigurationAccessOptionKeyVaultStoredConfig": "keyVaultStoredConfig",
      "name_aadLinkedTemplateName": "aadNestedTemplate.json",
      "name_adminCustomSSLLinkedTemplateName": "adminTemplateForCustomSSL.json",
      "name_adminLinkedTemplateDeployment": "[concat('admin',if(parameters('enableCustomSSL'),'CustomSSL',''),'LinkedTemplate')]",
      "name_adminLinkedTemplateName": "adminTemplate.json",
      "name_dbLinkedTemplate": "dbTemplate.json",
      "name_dnszonesLinkedTemplateName": "dnszonesTemplate.json",
      "name_elkLinkedTemplateName": "elkNestedTemplate.json",
      "name_nsgLinkedTemplateName": "nsgNestedTemplate.json",
      "name_keyVaultNestedTemplate": "_keyVaultNestedTemplate.json"
   },
   "resources": [
      {
         "type": "Microsoft.Resources/deployments",
         "apiVersion": "${azure.apiVersion}",
         "name": "${admin.start}",
         "properties": {
            "mode": "Incremental",
            "template": {
               "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
               "contentVersion": "1.0.0.0",
               "resources": [
               ]
            }
         }
      },
      {
         "name": "adminLinkedTemplate",
         "type": "Microsoft.Resources/deployments",
         "apiVersion": "${azure.apiVersion}",
         "condition": "[not(parameters('enableCustomSSL'))]",
         "properties": {
            "mode": "Incremental",
            "templateLink": {
               "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_adminLinkedTemplateName')))]",
               "contentVersion": "1.0.0.0"
            },
            "parameters": {
               "_artifactsLocation": {
                  "value": "[parameters('_artifactsLocation')]"
               },
               "_artifactsLocationSasToken": {
                  "value": "[parameters('_artifactsLocationSasToken')]"
               },
               "adminPasswordOrKey": {
                  "value": "[parameters('adminPasswordOrKey')]"
               },
               "adminUsername": {
                  "value": "[parameters('adminUsername')]"
               },
               "adminVMName": {
                  "value": "[parameters('adminVMName')]"
               },
               "authenticationType": {
                  "value": "[parameters('authenticationType')]"
               },
               "addressPrefixes": {
                  "value": "[parameters('addressPrefixes')]"
               },
               "customDNSName": {
                  "value": "[if(parameters('enableCustomDNS'), format('{0}.{1}', parameters('dnszoneAdminConsoleLabel'),parameters('dnszoneName')),'')]"
               },
               "dnsLabelPrefix": {
                  "value": "[parameters('dnsLabelPrefix')]"
               },
               "enableCustomDNS": {
                  "value": "[parameters('enableCustomDNS')]"
               },
               "enableHTTPAdminListenPort": {
                  "value": "[parameters('enableHTTPAdminListenPort')]"
               },
               "location": {
                  "value": "[parameters('location')]"
               },
               "portsToExpose": {
                  "value": "[parameters('portsToExpose')]"
               },
               "skuUrnVersion": {
                  "value": "[parameters('skuUrnVersion')]"
               },
               "subnetName": {
                  "value": "[parameters('subnetName')]"
               },
               "subnetPrefix": {
                  "value": "[parameters('subnetPrefix')]"
               },
               "usePreviewImage": {
                  "value": "[parameters('usePreviewImage')]"
               },
               "useSystemAssignedManagedIdentity": {
                  "value": "[parameters('useSystemAssignedManagedIdentity')]"
               },
               "vmSizeSelect": {
                  "value": "[parameters('vmSizeSelect')]"
               },
               "virtualNetworkNewOrExisting": {
                  "value": "[parameters('virtualNetworkNewOrExisting')]"
               },
               "virtualNetworkName": {
                  "value": "[parameters('virtualNetworkName')]"
               },
               "virtualNetworkResourceGroupName": {
                  "value": "[parameters('virtualNetworkResourceGroupName')]"
               },
               "wlsDomainName": {
                  "value": "[parameters('wlsDomainName')]"
               },
               "wlsPassword": {
                  "value": "[parameters('wlsPassword')]"
               },
               "wlsUserName": {
                  "value": "[parameters('wlsUserName')]"
               }
            }
         }
      },
      {
         "name": "keyVaultNestedTemplate",
         "type": "Microsoft.Resources/deployments",
         "apiVersion": "${azure.apiVersion}",
         "condition": "[and(parameters('enableCustomSSL'), equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionUploadConfig')))]",
         "properties": {
            "mode": "Incremental",
            "templateLink": {
               "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_keyVaultNestedTemplate')))]",
               "contentVersion": "1.0.0.0"
            },
            "parameters": {
               "uploadedCustomIdentityKeyStoreData": {
                  "value": "[parameters('uploadedCustomIdentityKeyStoreData')]"
               },
               "uploadedCustomIdentityKeyStorePassphrase": {
                  "value": "[parameters('uploadedCustomIdentityKeyStorePassphrase')]"
               },
               "uploadedCustomTrustKeyStoreData": {
                  "value": "[parameters('uploadedCustomTrustKeyStoreData')]"
               },
               "uploadedCustomTrustKeyStorePassPhrase": {
                  "value": "[parameters('uploadedCustomTrustKeyStorePassPhrase')]"
               },
               "uploadedPrivateKeyAlias": {
                  "value": "[parameters('uploadedPrivateKeyAlias')]"
               },
               "uploadedPrivateKeyPassPhrase": {
                  "value": "[parameters('uploadedPrivateKeyPassPhrase')]"
               },
               "enabledForTemplateDeployment": {
                  "value": "[parameters('enabledForTemplateDeployment')]"
               },
               "location": {
                  "value": "[parameters('location')]"
               },
               "sku": {
                  "value": "[parameters('keyVaultSku')]"
               }
            }
         }
      },
      {
         "name": "adminCustomSSLLinkedTemplate",
         "type": "Microsoft.Resources/deployments",
         "apiVersion": "${azure.apiVersion}",
         "condition": "[parameters('enableCustomSSL')]",
         "properties": {
            "mode": "Incremental",
            "templateLink": {
               "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_adminCustomSSLLinkedTemplateName')))]",
               "contentVersion": "1.0.0.0"
            },
            "parameters": {
               "_artifactsLocation": {
                  "value": "[parameters('_artifactsLocation')]"
               },
               "_artifactsLocationSasToken": {
                  "value": "[parameters('_artifactsLocationSasToken')]"
               },
               "adminPasswordOrKey": {
                  "value": "[parameters('adminPasswordOrKey')]"
               },
               "adminUsername": {
                  "value": "[parameters('adminUsername')]"
               },
               "adminVMName": {
                  "value": "[parameters('adminVMName')]"
               },
               "authenticationType": {
                  "value": "[parameters('authenticationType')]"
               },
               "addressPrefixes": {
                  "value": "[parameters('addressPrefixes')]"
               },
               "customDNSName": {
                  "value": "[if(parameters('enableCustomDNS'), format('{0}.{1}', parameters('dnszoneAdminConsoleLabel'),parameters('dnszoneName')),'')]"
               },
               "dnsLabelPrefix": {
                  "value": "[parameters('dnsLabelPrefix')]"
               },
               "enableCustomDNS": {
                  "value": "[parameters('enableCustomDNS')]"
               },
               "enableCustomSSL": {
                  "value": "[parameters('enableCustomSSL')]"
               },
               "enableHTTPAdminListenPort": {
                  "value": "[parameters('enableHTTPAdminListenPort')]"
               },
               "location": {
                  "value": "[parameters('location')]"
               },
               "keyVaultCustomIdentityKeyStoreData": {
                  "reference": {
                     "keyVault": {
                        "id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultName'),reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
                     },
                     "secretName": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultCustomIdentityKeyStoreDataSecretName'),reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.customIdentityKeyStoreDataSecretName.value)]"
                  }
               },
               "keyVaultCustomIdentityKeyStorePassPhrase": {
                  "reference": {
                     "keyVault": {
                        "id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultName'),reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
                     },
                     "secretName": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultCustomIdentityKeyStorePassPhraseSecretName'), reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.customIdentityKeyStorePassPhraseSecretName.value)]"
                  }
               },
               "keyVaultCustomIdentityKeyStoreType": {
                  "value": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultCustomIdentityKeyStoreType'), parameters('uploadedCustomIdentityKeyStoreType'))]"
               },
               "keyVaultCustomTrustKeyStoreData": {
                  "reference": {
                     "keyVault": {
                        "id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultName'),reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
                     },
                     "secretName": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultCustomTrustKeyStoreDataSecretName'), reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.customTrustKeyStoretDataSecretName.value)]"
                  }
               },
               "keyVaultCustomTrustKeyStorePassPhrase": {
                  "reference": {
                     "keyVault": {
                        "id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultName'),reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
                     },
                     "secretName": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultCustomTrustKeyStorePassPhraseSecretName'), reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.customTrustKeyStorePassPhraseSecretName.value)]"
                  }
               },
               "keyVaultCustomTrustKeyStoreType": {
                  "value": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultCustomTrustKeyStoreType'), parameters('uploadedCustomTrustKeyStoreType'))]"
               },
               "keyVaultPrivateKeyAlias": {
                  "reference": {
                     "keyVault": {
                        "id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultName'),reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
                     },
                     "secretName": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultPrivateKeyAliasSecretName'), reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.privateKeyAliasSecretName.value)]"
                  }
               },
               "keyVaultPrivateKeyPassPhrase": {
                  "reference": {
                     "keyVault": {
                        "id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultName'),reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
                     },
                     "secretName": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultPrivateKeyPassPhraseSecretName'), reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.privateKeyPassPhraseSecretName.value)]"
                  }
               },
               "portsToExpose": {
                  "value": "[parameters('portsToExpose')]"
               },
               "skuUrnVersion": {
                  "value": "[parameters('skuUrnVersion')]"
               },
               "subnetName": {
                  "value": "[parameters('subnetName')]"
               },
               "subnetPrefix": {
                  "value": "[parameters('subnetPrefix')]"
               },
               "usePreviewImage": {
                  "value": "[parameters('usePreviewImage')]"
               },
               "useSystemAssignedManagedIdentity": {
                  "value": "[parameters('useSystemAssignedManagedIdentity')]"
               },
               "vmSizeSelect": {
                  "value": "[parameters('vmSizeSelect')]"
               },
               "virtualNetworkNewOrExisting": {
                  "value": "[parameters('virtualNetworkNewOrExisting')]"
               },
               "virtualNetworkName": {
                  "value": "[parameters('virtualNetworkName')]"
               },
               "virtualNetworkResourceGroupName": {
                  "value": "[parameters('virtualNetworkResourceGroupName')]"
               },
               "wlsDomainName": {
                  "value": "[parameters('wlsDomainName')]"
               },
               "wlsPassword": {
                  "value": "[parameters('wlsPassword')]"
               },
               "wlsUserName": {
                  "value": "[parameters('wlsUserName')]"
               }
            }
         },
         "dependsOn": [
            "[resourceId('Microsoft.Resources/deployments', 'keyVaultNestedTemplate')]"
         ]
      },
      {
         "type": "Microsoft.Resources/deployments",
         "apiVersion": "${azure.apiVersion}",
         "condition": "[equals(parameters('virtualNetworkNewOrExisting'), 'new')]",
         "name": "networkSecurityLinkedTemplate",
         "properties": {
            "mode": "Incremental",
            "templateLink": {
               "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_nsgLinkedTemplateName')))]",
               "contentVersion": "1.0.0.0"
            },
            "parameters": {
               "denyPublicTrafficForAdminServer": {
                  "value": "[parameters('denyPublicTrafficForAdminServer')]"
               },
               "networkSecurityGroupName": {
                  "value": "[concat(parameters('dnsLabelPrefix'), '-nsg')]"
               }
            }
         },
         "dependsOn": [
            "[resourceId('Microsoft.Resources/deployments', 'adminLinkedTemplate')]",
            "[resourceId('Microsoft.Resources/deployments', 'adminCustomSSLLinkedTemplate')]"
         ]
      },
      {
         "type": "Microsoft.Resources/deployments",
         "apiVersion": "${azure.apiVersion}",
         "name": "dnszonesLinkedTemplate",
         "condition": "[and(parameters('enableCustomDNS'), equals(parameters('virtualNetworkNewOrExisting'), 'new'))]",
         "dependsOn": [
            "[resourceId('Microsoft.Resources/deployments', 'networkSecurityLinkedTemplate')]"
         ],
         "properties": {
            "mode": "Incremental",
            "templateLink": {
               "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_dnszonesLinkedTemplateName')))]",
               "contentVersion": "1.0.0.0"
            },
            "parameters": {
               "_artifactsLocation": {
                  "value": "[parameters('_artifactsLocation')]"
               },
               "_artifactsLocationSasToken": {
                  "value": "[parameters('_artifactsLocationSasToken')]"
               },
               "dnszonesARecordSetNames": {
                  "value": [
                     "[parameters('dnszoneAdminConsoleLabel')]"
                  ]
               },
               "dnszoneName": {
                  "value": "[parameters('dnszoneName')]"
               },
               "hasDNSZones": {
                  "value": "[parameters('hasDNSZones')]"
               },
               "location": {
                  "value": "[parameters('location')]"
               },
               "resourceGroup": {
                  "value": "[parameters('dnszoneResourceGroup')]"
               },
               "targetResources": {
                  "value": [
                     "[reference(variables('name_adminLinkedTemplateDeployment'), '${azure.apiVersion}').outputs._adminPublicIPId.value]"
                  ]
               }
            }
         }
      },
      {
         "name": "dbLinkedTemplate",
         "dependsOn": [
            "[resourceId('Microsoft.Resources/deployments', 'dnszonesLinkedTemplate')]"
         ],
         "type": "Microsoft.Resources/deployments",
         "apiVersion": "${azure.apiVersion}",
         "condition": "[parameters('enableDB')]",
         "properties": {
            "mode": "Incremental",
            "templateLink": {
               "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_dbLinkedTemplate')))]",
               "contentVersion": "1.0.0.0"
            },
            "parameters": {
               "_artifactsLocation": {
                  "value": "[parameters('_artifactsLocation')]"
               },
               "_artifactsLocationSasToken": {
                  "value": "[parameters('_artifactsLocationSasToken')]"
               },
               "adminVMName": {
                  "value": "[parameters('adminVMName')]"
               },
               "databaseType": {
                  "value": "[parameters('databaseType')]"
               },
               "dbGlobalTranPro": {
                  "value": "[parameters('dbGlobalTranPro')]"
               },
               "dbPassword": {
                  "value": "[parameters('dbPassword')]"
               },
               "dbUser": {
                  "value": "[parameters('dbUser')]"
               },
               "dsConnectionURL": {
                  "value": "[parameters('dsConnectionURL')]"
               },
               "jdbcDataSourceName": {
                  "value": "[parameters('jdbcDataSourceName')]"
               },
               "location": {
                  "value": "[parameters('location')]"
               },
               "wlsPassword": {
                  "value": "[parameters('wlsPassword')]"
               },
               "wlsUserName": {
                  "value": "[parameters('wlsUserName')]"
               }

            }
         }
      },
      {
         "name": "aadLinkedTemplate",
         "dependsOn": [
            "[resourceId('Microsoft.Resources/deployments', 'dbLinkedTemplate')]"
         ],
         "type": "Microsoft.Resources/deployments",
         "apiVersion": "${azure.apiVersion}",
         "condition": "[and(parameters('enableAAD'),not(parameters('enableCustomSSL')))]",
         "properties": {
            "mode": "Incremental",
            "templateLink": {
               "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_aadLinkedTemplateName')))]",
               "contentVersion": "1.0.0.0"
            },
            "parameters": {
               "_artifactsLocation": {
                  "value": "[parameters('_artifactsLocation')]"
               },
               "_artifactsLocationSasToken": {
                  "value": "[parameters('_artifactsLocationSasToken')]"
               },
               "aadsPortNumber": {
                  "value": "[parameters('aadsPortNumber')]"
               },
               "aadsPublicIP": {
                  "value": "[parameters('aadsPublicIP')]"
               },
               "aadsServerHost": {
                  "value": "[parameters('aadsServerHost')]"
               },
               "adminVMName": {
                  "value": "[parameters('adminVMName')]"
               },
               "location": {
                  "value": "[parameters('location')]"
               },
               "wlsDomainName": {
                  "value": "[parameters('wlsDomainName')]"
               },
               "wlsLDAPGroupBaseDN": {
                  "value": "[parameters('wlsLDAPGroupBaseDN')]"
               },
               "wlsLDAPPrincipal": {
                  "value": "[parameters('wlsLDAPPrincipal')]"
               },
               "wlsLDAPPrincipalPassword": {
                  "value": "[parameters('wlsLDAPPrincipalPassword')]"
               },
               "wlsLDAPProviderName": {
                  "value": "[parameters('wlsLDAPProviderName')]"
               },
               "wlsLDAPSSLCertificate": {
                  "value": "[parameters('wlsLDAPSSLCertificate')]"
               },
               "wlsLDAPUserBaseDN": {
                  "value": "[parameters('wlsLDAPUserBaseDN')]"
               },
               "wlsPassword": {
                  "value": "[parameters('wlsPassword')]"
               },
               "wlsUserName": {
                  "value": "[parameters('wlsUserName')]"
               }
            }
         }
      },
      {
         "name": "aadLinkedTemplateWithCustomSSL",
         "dependsOn": [
            "[resourceId('Microsoft.Resources/deployments', 'dbLinkedTemplate')]",
            "[resourceId('Microsoft.Resources/deployments', 'keyVaultNestedTemplate')]"
         ],
         "type": "Microsoft.Resources/deployments",
         "apiVersion": "${azure.apiVersion}",
         "condition": "[and(parameters('enableAAD'),parameters('enableCustomSSL'))]",
         "properties": {
            "mode": "Incremental",
            "templateLink": {
               "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_aadLinkedTemplateName')))]",
               "contentVersion": "1.0.0.0"
            },
            "parameters": {
               "_artifactsLocation": {
                  "value": "[parameters('_artifactsLocation')]"
               },
               "_artifactsLocationSasToken": {
                  "value": "[parameters('_artifactsLocationSasToken')]"
               },
               "aadsPortNumber": {
                  "value": "[parameters('aadsPortNumber')]"
               },
               "aadsPublicIP": {
                  "value": "[parameters('aadsPublicIP')]"
               },
               "aadsServerHost": {
                  "value": "[parameters('aadsServerHost')]"
               },
               "adminVMName": {
                  "value": "[parameters('adminVMName')]"
               },
               "location": {
                  "value": "[parameters('location')]"
               },
               "wlsDomainName": {
                  "value": "[parameters('wlsDomainName')]"
               },
               "wlsLDAPGroupBaseDN": {
                  "value": "[parameters('wlsLDAPGroupBaseDN')]"
               },
               "wlsLDAPPrincipal": {
                  "value": "[parameters('wlsLDAPPrincipal')]"
               },
               "wlsLDAPPrincipalPassword": {
                  "value": "[parameters('wlsLDAPPrincipalPassword')]"
               },
               "wlsLDAPProviderName": {
                  "value": "[parameters('wlsLDAPProviderName')]"
               },
               "wlsLDAPSSLCertificate": {
                  "value": "[parameters('wlsLDAPSSLCertificate')]"
               },
               "wlsLDAPUserBaseDN": {
                  "value": "[parameters('wlsLDAPUserBaseDN')]"
               },
               "wlsPassword": {
                  "value": "[parameters('wlsPassword')]"
               },
               "wlsUserName": {
                  "value": "[parameters('wlsUserName')]"
               },
               "enableCustomSSL": {
                  "value": "[parameters('enableCustomSSL')]"
               },
               "keyVaultCustomTrustKeyStorePassPhrase": {
                  "reference": {
                     "keyVault": {
                        "id": "[resourceId(variables('const_currentSubscription'), if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultResourceGroup'),resourceGroup().name), 'Microsoft.KeyVault/vaults', if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('adminSSLKeyVaultName'),reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.keyVaultName.value))]"
                     },
                     "secretName": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultCustomTrustKeyStorePassPhraseSecretName'), reference('keyVaultNestedTemplate', '${azure.apiVersion}').outputs.customTrustKeyStorePassPhraseSecretName.value)]"
                  }
               },
               "keyVaultCustomTrustKeyStoreType": {
                  "value": "[if(equals(parameters('sslConfigurationAccessOption'), variables('const_sslConfigurationAccessOptionKeyVaultStoredConfig')),parameters('keyVaultCustomTrustKeyStoreType'), parameters('uploadedCustomTrustKeyStoreType'))]"
               }
            }
         }
      },
      {
         "name": "elkLinkedTemplate",
         "dependsOn": [
            "[resourceId('Microsoft.Resources/deployments', 'aadLinkedTemplate')]"
         ],
         "type": "Microsoft.Resources/deployments",
         "apiVersion": "${azure.apiVersion}",
         "condition": "[parameters('enableELK')]",
         "properties": {
            "mode": "Incremental",
            "templateLink": {
               "uri": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/', variables('name_elkLinkedTemplateName')))]",
               "contentVersion": "1.0.0.0"
            },
            "parameters": {
               "_artifactsLocation": {
                  "value": "[parameters('_artifactsLocation')]"
               },
               "_artifactsLocationSasToken": {
                  "value": "[parameters('_artifactsLocationSasToken')]"
               },
               "adminVMName": {
                  "value": "[parameters('adminVMName')]"
               },
               "elasticsearchEndpoint": {
                  "value": "[parameters('elasticsearchEndpoint')]"
               },
               "elasticsearchPassword": {
                  "value": "[parameters('elasticsearchPassword')]"
               },
               "elasticsearchUserName": {
                  "value": "[parameters('elasticsearchUserName')]"
               },
               "location": {
                  "value": "[parameters('location')]"
               },
               "logsToIntegrate": {
                  "value": "[parameters('logsToIntegrate')]"
               },
               "wlsDomainName": {
                  "value": "[parameters('wlsDomainName')]"
               },
               "wlsPassword": {
                  "value": "[parameters('wlsPassword')]"
               },
               "wlsUserName": {
                  "value": "[parameters('wlsUserName')]"
               }
            }
         }
      },
      {
         "type": "Microsoft.Resources/deployments",
         "apiVersion": "${azure.apiVersion}",
         "name": "${admin.end}",
         "dependsOn": [
            "[resourceId('Microsoft.Resources/deployments', variables('name_adminLinkedTemplateDeployment'))]",
            "[resourceId('Microsoft.Resources/deployments', 'networkSecurityLinkedTemplate')]",
            "[resourceId('Microsoft.Resources/deployments', 'dnszonesLinkedTemplate')]",
            "[resourceId('Microsoft.Resources/deployments', 'dbLinkedTemplate')]",
            "[resourceId('Microsoft.Resources/deployments', 'aadLinkedTemplate')]",
            "[resourceId('Microsoft.Resources/deployments', 'elkLinkedTemplate')]"
         ],
         "properties": {
            "mode": "Incremental",
            "template": {
               "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
               "contentVersion": "1.0.0.0",
               "resources": [
               ]
            }
         }
      }
   ],
   "outputs": {
      "hostname": {
         "type": "string",
         "value": "[reference(variables('name_adminLinkedTemplateDeployment'),'${azure.apiVersion}').outputs.hostname.value]"
      },
      "sshCommand": {
         "type": "string",
         "value": "[concat('ssh ', parameters('adminUsername'), '@', reference(variables('name_adminLinkedTemplateDeployment'),'${azure.apiVersion}').outputs.hostname.value)]"
      },
      "wlsDomainLocation": {
         "type": "string",
         "value": "[reference(variables('name_adminLinkedTemplateDeployment'),'${azure.apiVersion}').outputs.wlsDomainLocation.value]"
      },
      "adminConsoleURL": {
         "type": "string",
         "value": "[if(parameters('enableCustomDNS'), uri(format('http://{0}.{1}:7001/console/',parameters('dnszoneAdminConsoleLabel'),parameters('dnszoneName')), ''),reference(variables('name_adminLinkedTemplateDeployment'),'${azure.apiVersion}').outputs.adminConsoleURL.value)]"
      },
      "adminConsoleSecureURL": {
         "type": "string",
         "value": "[if(parameters('enableCustomDNS'), uri(format('https://{0}.{1}:7002/console/',parameters('dnszoneAdminConsoleLabel'),parameters('dnszoneName')), ''),reference(variables('name_adminLinkedTemplateDeployment'),'${azure.apiVersion}').outputs.adminConsoleSecureURL.value)]"
      },
      "logIndex": {
         "type": "string",
         "value": "[if(parameters('enableELK'), reference('elkLinkedTemplate', '${azure.apiVersion}').outputs.logIndex.value, '')]"
      },
      "dnsZoneNameServers": {
         "type": "array",
         "condition": "[and(parameters('enableCustomDNS'), not(parameters('hasDNSZones')))]",
         "value": "[reference('dnszonesLinkedTemplate','${azure.apiVersion}').outputs.dnsZoneNameServers.value]"
      }
   }
}
