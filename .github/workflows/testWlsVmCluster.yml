#Copyright (c) 2021 Oracle and/or its affiliates.
#Released under the Universal Permissive License v1.0 as shown at
# https://oss.oracle.com/licenses/upl/

name: Test Configured Cluster on VM
on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Specify Git Ref if needed.'
        required: false
        default: 'refs/heads/main'
      location:
        description: 'The location for the resources'
        required: true
        default: eastus
  # Allows you to run this workflow using GitHub APIs
  # PERSONAL_ACCESS_TOKEN=<GITHUB_PERSONAL_ACCESS_TOKEN>
  # REPO_NAME=oracle/weblogic-azure/weblogic-azure-vm/arm-oraclelinux-wls-cluster
  # curl --verbose -XPOST -u "mriccell:${PERSONAL_ACCESS_TOKEN}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/${REPO_NAME}/dispatches --data '{"event_type": "test-vm-cluster", "client_payload": {"ref": "refs/heads/main"}}'
  repository_dispatch:
    types: [test-vm-cluster,integration-test-all]

env:
  adminConsolePort: 7001
  adminPassword: ${{ secrets.WLS_PSW }}
  dbAdminUser: weblogic
  dbName: wlsdb${{ github.run_id }}${{ github.run_number }}
  dbServerName: weblogicdb
  gitEmail: ${{ secrets.USER_EMAIL }}
  gitToken: ${{ secrets.GIT_TOKEN }}
  gitUserName: ${{ secrets.USER_NAME }}
  managedServers: "msp1"
  numberOfInstances: 2
  offerName: arm-oraclelinux-wls-cluster
  offerPath: weblogic-azure/weblogic-azure-vm/arm-oraclelinux-wls-cluster
  repoName: weblogic-azure
  repoOwner: ${{ secrets.USER_NAME }}
  resourceGroupForDependency: wlsd-${{ github.run_id }}-${{ github.run_number }}
  resourceGroupPrefix: ${{ github.run_id }}-${{ github.run_number }}
  testbranchName: cicd-${{ github.run_id }}-${{ github.run_number }}
  wlsDomainName: wlsd
  wlsPassword: ${{ secrets.WLS_PSW }}
  wlsUserName: weblogic

jobs:
  preflight:
    outputs: 
      artifactName: ${{steps.artifact_file.outputs.artifactName}}
      location: ${{ steps.setup-env-variables-based-on-dispatch-event.outputs.location }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup environment variables
        id: setup-env-variables-based-on-dispatch-event
        run: |
          location=eastus # default value

          if [ ${{ github.event_name }} == 'workflow_dispatch' ]; then
            ref=${{ github.event.inputs.ref }}
            location=${{ github.event.inputs.location }}
          else
            ref=${{ github.event.client_payload.ref }}
            location=${{ github.event.client_payload.location }}
          fi
          if [ -z "$ref" ]; then
            ref='refs/heads/main'
          fi
          echo "##[set-output name=ref;]${ref}"
          echo "##[set-output name=location;]${location}"
          echo "ref=${ref}" >> $GITHUB_ENV
          echo "location=${location}" >> $GITHUB_ENV
      - uses: actions/checkout@v2.3.4
      - name: Set up Maven with GitHub token
        uses: ./.github/actions/setupmaven
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v2.3.4
      - name: Set dependency reference
        uses: ./.github/actions/setvars
        with:
          varFilePath: ./.github/variables/vm-dependencies.env
      - name: Checkout arm-ttk
        uses: actions/checkout@v2
        with:
          repository: Azure/arm-ttk
          path: arm-ttk
          ref: ${{ env.refArmttk }}
      - name: Checkout ${{env.repoOwner}}/${{env.repoName}}
        uses: actions/checkout@v2
        with:
          repository: ${{env.repoOwner}}/${{env.repoName}}
          path: ${{env.repoName}}
          ref: ${{ env.ref }}
      - name: Build and test ${{ env.offerName }}
        run: |
          mvn -Ptemplate-validation-tests clean install --file ${offerPath}/pom.xml -Dgit.repo.owner=${{ env.repoOwner }} -Dgit.tag=${{ env.ref }}
      - name: Checkout ${{env.repoOwner}}/${{env.repoName}}
        uses: actions/checkout@v2
        with:
          repository: ${{env.repoOwner}}/${{env.repoName}}
          path: ${{env.repoName}}-dev
      - name: Create a new branch with development pids in nestedtemplates
        run: |
          current=`pwd`
          echo "current=${current}" >> $GITHUB_ENV
          offerDevPath=${{ env.repoName }}-dev/weblogic-azure-vm/${{env.offerName}}/${{env.offerName}}
          cd ${offerDevPath}/src/main/arm/nestedtemplates
          git config --global core.longpaths true
          git config --global user.email $gitEmail
          git config --global user.name $gitUserName
          echo "create branch $testbranchName"
          git checkout -b $testbranchName
          rm -r -f $current/${offerDevPath}/src/main/arm/nestedtemplates/*
          cp -r -f $current/${offerPath}/${{ env.offerName }}/target/arm/nestedtemplates/* $current/${offerDevPath}/src/main/arm/nestedtemplates/
          git status
          git commit -a -m "hard code pids"
          git push https://$gitToken@github.com/${GITHUB_REPOSITORY}.git -f

      - uses: azure/login@v1
        id: azure-login
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Validate deployment templates for different combinations of service integration
        id: validate-deployment-templates
        run: |
          bash ${{ env.offerPath }}/test/scripts/verify-deployments.sh <<< "${{ github.run_id }}${{ github.run_number }} ${location} \
            ${{ env.offerPath }}/${{ env.offerName }}/target/arm/mainTemplate.json \
            ${GITHUB_REPOSITORY} ${testbranchName} ${{ env.offerPath }}/test/scripts"

      - name: Generate artifact file name and path
        id: artifact_file
        run: |
          version=$(mvn -q -Dexec.executable=echo -Dexec.args='${version.${{ env.offerName }}}' --file weblogic-azure/pom.xml --non-recursive exec:exec)
          artifactName=${{ env.offerName }}-$version-arm-assembly
          unzip ${{ env.offerPath }}/${{ env.offerName }}/target/$artifactName.zip -d ${{ env.offerPath }}/${{ env.offerName }}/target/$artifactName
          echo "##[set-output name=artifactName;]${artifactName}"
          echo "##[set-output name=artifactPath;]${{ env.offerPath }}/${{ env.offerName }}/target/$artifactName"
      - name: Archive ${{ env.offerName }} template
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: ${{steps.artifact_file.outputs.artifactName}}
          path: ${{steps.artifact_file.outputs.artifactPath}}      

  deploy-dependencies:
    needs: preflight
    runs-on: ubuntu-latest
    steps:
      - name: Initialize environment variables
        run: |
          echo "location=${{needs.preflight.outputs.location}}" >> $GITHUB_ENV
      - uses: azure/login@v1
        id: azure-login
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group
        run: |
          echo "create resource group" ${{ env.resourceGroupForDependency }}
          az group create --verbose --name ${{ env.resourceGroupForDependency }} --location ${location}
      - uses: actions/checkout@v2.3.4
      - name: Set up PostgreSQL Flexible Server that allows access from Azure services
        uses: ./.github/actions/createPostgresqlFlexibleServer
        with:
          dbAdminUser: ${{ env.dbAdminUser }}
          dbName: ${{ env.dbName }}
          dbPassword: ${{ env.wlsPassword }}
          dbServerName: ${{ env.dbServerName }}
          location: ${{ env.location }}
          resourceGroupName: ${{ env.resourceGroupForDependency }}

  deploy-weblogic-cluster:
    needs: [deploy-dependencies, preflight]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        images:
          [
            "owls-141100-jdk11-ol91;Oracle:weblogic-141100-jdk11-ol91:owls-141100-jdk11-ol91;latest",
            "owls-141100-jdk11-ol87;Oracle:weblogic-141100-jdk11-ol87:owls-141100-jdk11-ol87;latest",
            "owls-141100-jdk8-ol91;Oracle:weblogic-141100-jdk8-ol91:owls-141100-jdk8-ol91;latest",
            "owls-141100-jdk8-ol87;Oracle:weblogic-141100-jdk8-ol87:owls-141100-jdk8-ol87;latest",
            "owls-122140-jdk8-ol91;Oracle:weblogic-122140-jdk8-ol91:owls-122140-jdk8-ol91;latest",
            "owls-122140-jdk8-ol87;Oracle:weblogic-122140-jdk8-ol87:owls-122140-jdk8-ol87;latest",             
            "owls-122140-jdk8-ol76;Oracle:weblogic-122140-jdk8-ol76:owls-122140-jdk8-ol7;latest",
            "owls-141100-jdk8-ol76;Oracle:weblogic-141100-jdk8-ol76:owls-141100-jdk8-ol7;latest",
            "owls-141100-jdk11-ol76;Oracle:weblogic-141100-jdk11-ol76:owls-141100-jdk11-ol7;latest",
            "owls-122140-jdk8-rhel76;Oracle:weblogic-122140-jdk8-rhel76:owls-122140-jdk8-rhel76;latest",
            "owls-141100-jdk8-rhel76;Oracle:weblogic-141100-jdk8-rhel76:owls-141100-jdk8-rhel76;latest",
            "owls-141100-jdk11-rhel76;Oracle:weblogic-141100-jdk11-rhel76:owls-141100-jdk11-rhel76;latest"
          ]
    steps:
      - name: Initialize environment variables
        run: |
          echo "location=${{needs.preflight.outputs.location}}" >> $GITHUB_ENV
      - name: Checkout ${{env.repoOwner}}/${{env.repoName}}
        uses: actions/checkout@v2
        with:
          repository: ${{env.repoOwner}}/${{env.repoName}}
          path: ${{env.repoName}}
      - name: Download artifact for deployment
        uses: actions/download-artifact@v4
        with:
          path: ${{ needs.preflight.outputs.artifactName }}
          name: ${{ needs.preflight.outputs.artifactName }}
      - uses: azure/login@v1
        id: azure-login
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Get Image SKU
        id: image-sku
        run: |
          imageUrn="${{ matrix.images }}"
          sku=${imageUrn%%;*}
          echo "sku=${sku}" >> $GITHUB_ENV
          echo ${resourceGroupPrefix}
          resourceGroup=$(echo "${resourceGroupPrefix}-${sku}" | sed "s/_//g")
          echo "resourceGroup=${resourceGroup}" >> $GITHUB_ENV
      - name: Create Resource Group
        id: create-resource-group
        run: |
            echo "create resource group" $resourceGroup
            az group create --verbose --name $resourceGroup --location ${location}

      - name: Prepare deployed parameters and test script
        id: prepare-deployed-parameters-and-test-script
        run: |
          repoPath=${GITHUB_REPOSITORY//\//\\/}
          bash ${{ env.offerPath }}/test/scripts/gen-parameters-deploy.sh <<< "${{ env.offerPath }}/test/scripts/parameters-test.json \
            $repoPath \
            ${{ env.testbranchName }} \
            ${{ env.location }} \
            ${{ env.wlsPassword }} \
            ${{ env.wlsUserName }} \
            ${{ env.wlsDomainName }} \
            ${{ matrix.images }} \
            ${{ env.dbServerName }} \
            ${{ env.dbName }} \
            ${{ env.wlsPassword }} \
            ${{ env.dbAdminUser }} \
            ${{ env.wlsPassword }}"

      - name: Accept Image Terms
        id: accept-terms
        run: |
            echo "accept terms for " "${{ matrix.images }}"
            rawUrn="${{ matrix.images }}"
            publisherAndName=$(echo ${rawUrn} | grep -o ";.*:" | sed "s/;//g")
            imageVersion=${rawUrn##*;}
            az vm image terms accept --urn ${publisherAndName}${sku}:${imageVersion}

      - name: Deploy WebLogic Server Cluster Domain offer
        id: deploy-wls-cluster
        run: |
            artifactName=${{ needs.preflight.outputs.artifactName }}
            echo "artifactName=${{ needs.preflight.outputs.artifactName }}" >> $GITHUB_ENV

            az deployment group create \
              --verbose \
              --resource-group $resourceGroup \
              --name wls-cluster-node \
              --parameters ${{ env.offerPath }}/test/scripts/parameters-test.json \
              --template-file ${artifactName}/mainTemplate.json

            export adminVMName=$(az deployment group show \
              --resource-group $resourceGroup \
              --name wls-cluster-node \
              --query "properties.outputs.adminVMName.value" -o tsv)
            echo "adminVMName=${adminVMName}" >> $GITHUB_ENV

      - name: Configure network security group
        id: configure-nsg
        run: |
            nsg=$(az network nsg list \
            --resource-group $resourceGroup \
            --query "[0].name" -o tsv)
            echo "Allow access to ${adminConsolePort}"
            az network nsg rule update \
              --resource-group $resourceGroup \
              --nsg-name ${nsg} \
              --name WebLogicAdminChannelPort \
              --access Allow \
              --source-address-prefixes 10.0.0.0/24
      
      - name: Verify system services at admin server
        id: verify-admin-service
        run: |
          echo "Verifying WebLogic services at admin server"
          message=$(az vm run-command invoke \
            --resource-group $resourceGroup \
            --name $adminVMName \
            --command-id RunShellScript \
            --scripts @${{ env.offerPath }}/test/scripts/verify-admin-services.sh \
            --query value[*].message)
          
          if [[ $message == *"not in active (running) state"* ]]; then
            echo "Error: $message"
            exit 1
          fi

      - name: Verify wls managed server services
        id: verify-msservice
        run: |
          managedServerVMNamePrefix=$(az deployment group show \
              --resource-group $resourceGroup \
              --name wls-cluster-node \
              --query "properties.outputs.managedServerVMNamePrefix.value" -o tsv)
          echo "managedServerVMNamePrefix=${managedServerVMNamePrefix}" >> $GITHUB_ENV
          
          managedServer1="${managedServerVMNamePrefix}1"          

          echo "Verifying WebLogic services at admin server"
          message=$(az vm run-command invoke \
            --resource-group $resourceGroup \
            --name $managedServer1 \
            --command-id RunShellScript \
            --scripts @${{ env.offerPath }}/test/scripts/verify-node-services.sh \
            --query value[*].message)
          
          if [[ $message == *"not in active (running) state"* ]]; then
            echo "Error: $message"
            exit 1
          fi
      
      - name: Query public IP of AdminServer VM
        id: query-wls-admin-ip
        run: |
            echo "query public ip"
            publicIP=$(az vm show \
              --resource-group $resourceGroup \
              --name $adminVMName -d \
              --query publicIps -o tsv)
            # echo environment variable
            echo "wlsPublicIP=${publicIP}" >> $GITHUB_ENV

      - name: Verify WebLogic Server Access
        id: verify-wls-access
        run: |
          echo "Verifying Weblogic Server Access"
          bash ${{ env.offerPath }}/test/scripts/verify-wls-access.sh <<< "$wlsPublicIP ${adminConsolePort} $wlsUserName $wlsPassword $managedServers"

      - name: Verify WebLogic Managed Server LifeCycle check
        id: verify-server-lifecycle
        run: |
          echo "Verifying Weblogic managed server lifecycle"
          bash ${{ env.offerPath }}/test/scripts/verify-servers-lifecycle.sh <<< "$wlsUserName ${wlsPassword} $wlsPublicIP $adminConsolePort $managedServers"
          
      - name: Query appGatewayURL of appgateway deployment
        id: query-agwurl
        run: |
            echo "query appgatewayURL"
            export appGatewayURL=$(az deployment group show \
              --resource-group $resourceGroup \
              --name wls-cluster-node \
              --query "properties.outputs.appGatewayURL.value" -o tsv)
              
            echo "appGatewayURL=${appGatewayURL}" >> $GITHUB_ENV
            
      - name: Checkout WebLogic-Cafe
        id: checkout-webapp
        uses: actions/checkout@v2
        with:
          repository: azure-javaee/weblogic-on-azure
          path: weblogic-on-azure

      - name: Maven build the web app
        id: maven-build-webapp
        run: |
          echo "build the WebLogic Cafe web app"
          mvn -DskipTests clean install --file weblogic-on-azure/javaee/weblogic-cafe/pom.xml

      - name: Query adminVMsver DNS
        id: query-adminvmdns
        run: |
            echo "query public ip id of $adminVMName"
            adminNicId=$(az vm show \
              --resource-group $resourceGroup \
              --name $adminVMName \
              --query networkProfile.networkInterfaces[0].id -o tsv)
            adminPublicIPId=$(az network nic show --id ${adminNicId} --query ipConfigurations[0].publicIPAddress.id -o tsv)
            echo "query adminVMsver DNS for $adminVMName"
            adminVMDNS=$(az network public-ip show \
              --id "${adminPublicIPId}" \
              --query dnsSettings.fqdn -o tsv)
            echo "save the adminVMDNS in environment variable"
            echo "adminVMDNS=${adminVMDNS}" >> $GITHUB_ENV      

      - name: Deploy WebLogicCafe app using WebLogic Management Services
        id: deploy-webapp
        run: |
          echo "Deploy WebLogic Cafe to server"          
          timeout 6m sh -c 'until nc -zv $0 $1; do echo "nc rc: $?"; sleep 5; done' ${adminVMDNS} ${adminConsolePort}
          bash ${{ env.offerPath }}/test/scripts/deploy-webapp.sh <<< "$wlsUserName $wlsPassword ${adminVMDNS} ${adminConsolePort} "

      - name: Verify WebLogicCafe app is successfully deployed
        id: verify-webapp-deployment
        run: |
          echo "Verify WebLogicCafe app is successfully deployed"
          bash ${{ env.offerPath }}/test/scripts/verify-webapp-deployment.sh <<< "${appGatewayURL}"      

      - name: Delete Resource Group
        id: delete-resource-group
        if: always()
        run: |
            echo "delete... " $resourceGroup
            az group delete --yes --no-wait --verbose --name $resourceGroup      

  cleanup-github-resource:
    needs: deploy-weblogic-cluster
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ${{ env.repoName }}
        uses: actions/checkout@v2
        with:
          repository: ${{env.repoOwner}}/${{env.repoName}}
          path: ${{ env.repoName }}
      - name: Delete testing branch
        run: |
          cd ${{ env.repoName }}
          git push https://$gitToken@github.com/$GITHUB_REPOSITORY.git -f --delete $testbranchName

  cleanup-az-resource:
    if: always()
    needs: deploy-weblogic-cluster
    runs-on: ubuntu-latest
    steps:
      - uses: azure/login@v1
        id: azure-login
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Delete DB Resource Group
        id: delete-db-resource-group
        run: |
            echo "delete... " $resourceGroup
            az group delete --yes --no-wait --verbose --name ${{ env.resourceGroupForDependency }}

  summary:
    needs: deploy-weblogic-cluster
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: summarize jobs
        if: ${{ github.repository_owner == 'wls-eng' }}
        run: |
          workflow_jobs=$(curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${{ github.run_id }}/jobs)
          critical_job_num=$(echo $workflow_jobs | jq '.jobs | map(select(.name|test("^deploy-weblogic-cluster."))) | length')
          echo "$critical_job_num"
          succeed_critical_job_num=$(echo $workflow_jobs | jq '.jobs | map(select(.conclusion=="success") | select(.name|test("^deploy-weblogic-cluster."))) | length')
          echo "$succeed_critical_job_num"
          failed_job_num="$(($critical_job_num-$succeed_critical_job_num))"
          echo $failed_job_num
          if (($failed_job_num >= 2));then
              echo "too many jobs failed, send notification to Teams"
              curl ${{ secrets.MSTEAMS_WEBHOOK }} \
              -H 'Content-Type: application/json' \
              --data-binary @- << EOF
              {
              "@context":"http://schema.org/extensions",
              "@type":"MessageCard",
              "text":"$failed_job_num jobs failed in Configured Cluster Offer's workflow, please take a look at: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${{ github.run_id }}"
              }
          EOF
          fi
