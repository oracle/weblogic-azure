#Copyright (c) 2021 Oracle and/or its affiliates.
#Released under the Universal Permissive License v1.0 as shown at
# https://oss.oracle.com/licenses/upl/

name: Test Dynamic Cluster on VM
on:
  workflow_dispatch:
    inputs:
      location:
        description: 'Location of the resources'
        required: true
        default: 'eastus'
  # Allows you to run this workflow using GitHub APIs
  # PERSONAL_ACCESS_TOKEN=<GITHUB_PERSONAL_ACCESS_TOKEN>
  # REPO_NAME=oracle/weblogic-azure/weblogic-azure-vm/arm-oraclelinux-wls-dynamic-cluster
  # curl --verbose -XPOST -u "mriccell:${PERSONAL_ACCESS_TOKEN}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/${REPO_NAME}/dispatches --data '{"event_type": "test-vm-dynamic-cluster"}'
  repository_dispatch:
    types: [test-vm-dynamic-cluster,integration-test-all]

env:
  adminConsolePort: 7001
  adminPassword: ${{ secrets.WLS_PSW }}
  adminVMName: adminServerVM
  dbAdminUser: weblogic
  dbName: wlsdb${{ github.run_id }}${{ github.run_number }}
  dbServerName: weblogicdb
  dynamicClusterSize: 1
  gitEmail: ${{ secrets.USER_EMAIL }}
  gitToken: ${{ secrets.GIT_TOKEN }}
  gitUserName: ${{ secrets.USER_NAME }} 
  location: eastus
  nsg: wls-nsg
  managedServerPrefix: managedServer
  managedServers: "managedServer1"
  managedServerVM: "managedServerVM1"
  maxDynamicClusterSize: 2
  offerName: arm-oraclelinux-wls-dynamic-cluster
  offerPath: weblogic-azure/weblogic-azure-vm/arm-oraclelinux-wls-dynamic-cluster
  repoName: weblogic-azure
  repoOwner: ${{ secrets.USER_NAME }}
  resourceGroupForDependency: wlsd-${{ github.run_id }}-${{ github.run_number }}
  resourceGroupPrefix: wls-${{ github.run_id }}-${{ github.run_number }}
  testbranchName: cicd-${{ github.run_id }}-${{ github.run_number }}
  wlsAdminServices: "rngd wls_admin wls_nodemanager"
  wlsDomainName: dyClusterDomain
  wlsMsServices: "rngd wls_nodemanager"
  wlsPassword: ${{ secrets.WLS_PSW }}
  wlsUserName: weblogic

jobs:
  preflight:
    outputs: 
      artifactName: ${{steps.artifact_file.outputs.artifactName}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Set up Maven with GitHub token
        uses: ./.github/actions/setupmaven
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v2.3.4
      - name: Set dependency reference
        uses: ./.github/actions/setvars
        with:
          varFilePath: ./.github/variables/vm-dependencies.env
      - name: Checkout arm-ttk
        uses: actions/checkout@v2
        with:
          repository: Azure/arm-ttk
          path: arm-ttk
          ref: ${{ env.refArmTtk }}
      - name: Checkout ${{env.repoOwner}}/${{env.repoName}}
        uses: actions/checkout@v2
        with:
          repository: ${{env.repoOwner}}/${{env.repoName}}
          path: ${{env.repoName}}
      - name: Built and test ${{env.offerName}}
        run: mvn -Ptemplate-validation-tests clean install --file ${offerPath}/pom.xml

      - name: Checkout ${{env.repoOwner}}/${{env.repoName}}
        uses: actions/checkout@v2
        with:
          repository: ${{env.repoOwner}}/${{env.repoName}}
          path: ${{env.repoName}}-dev
      - name: Create a new branch with development pids in nestedtemplates
        run: |
          current=`pwd`
          echo "current=${current}" >> $GITHUB_ENV
          offerDevPath=${{ env.repoName }}-dev/weblogic-azure-vm/${{env.offerName}}/${{env.offerName}}
          cd ${offerDevPath}/src/main/arm/nestedtemplates
          git config --global core.longpaths true
          git config --global user.email $gitEmail
          git config --global user.name $gitUserName
          echo "create branch $testbranchName"
          git checkout -b $testbranchName
          rm -r -f $current/${offerDevPath}/src/main/arm/nestedtemplates/*
          cp -r -f $current/${offerPath}/${{ env.offerName }}/target/arm/nestedtemplates/* $current/${offerDevPath}/src/main/arm/nestedtemplates/
          git status
          git commit -a -m "hard code pids"
          git push https://$gitToken@github.com/${GITHUB_REPOSITORY}.git -f

      - uses: azure/login@v1
        id: azure-login
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Validate deployment templates for different combinations of service integration
        id: validate-deployment-templates
        run: |
          bash ${offerPath}/test/scripts/verify-deployments.sh <<< \
            "${{ github.run_id }}${{ github.run_number }} ${location} \
            ${offerPath}/${offerName}/target/arm/mainTemplate.json \
            ${GITHUB_REPOSITORY} ${testbranchName} ${offerPath}/test/scripts"

      - name: Generate artifact file name and path
        id: artifact_file
        run: |
          version=$(mvn -q -Dexec.executable=echo -Dexec.args='${version.${{ env.offerName }}}' --file weblogic-azure/pom.xml --non-recursive exec:exec)
          artifactName=${{ env.offerName }}-$version-arm-assembly
          unzip ${offerPath}/${{ env.offerName }}/target/$artifactName.zip -d ${offerPath}/${{ env.offerName }}/target/$artifactName
          echo "##[set-output name=artifactName;]${artifactName}"
          echo "##[set-output name=artifactPath;]${offerPath}/${{ env.offerName }}/target/$artifactName"
      - name: Archive ${{env.offerName}} template
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: ${{steps.artifact_file.outputs.artifactName}}
          path: ${{steps.artifact_file.outputs.artifactPath}}

  deploy-dependencies:
    needs: preflight
    runs-on: ubuntu-latest
    steps:
      - uses: azure/login@v1
        id: azure-login
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Create Resource Group
        id: create-resource-group
        run: |
            echo "create resource group" ${{ env.resourceGroupForDependency }}
            az group create --verbose --name ${{ env.resourceGroupForDependency }} --location ${location}
      - uses: actions/checkout@v2.3.4
      - name: Set up PostgreSQL Flexible Server that allows access from Azure services
        uses: ./.github/actions/createPostgresqlFlexibleServer
        with:
          dbAdminUser: ${{ env.dbAdminUser }}
          dbName: ${{ env.dbName }}
          dbPassword: ${{ env.wlsPassword }}
          dbServerName: ${{ env.dbServerName }}
          location: ${{ env.location }}
          resourceGroupName: ${{ env.resourceGroupForDependency }}

  deploy-weblogic-cluster:
    needs: preflight
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        images:
          [
            "owls-141100-jdk11-ol91;Oracle:weblogic-141100-jdk11-ol91:owls-141100-jdk11-ol91;latest",
            "owls-141100-jdk11-ol87;Oracle:weblogic-141100-jdk11-ol87:owls-141100-jdk11-ol87;latest",
            "owls-141100-jdk8-ol91;Oracle:weblogic-141100-jdk8-ol91:owls-141100-jdk8-ol91;latest",
            "owls-141100-jdk8-ol87;Oracle:weblogic-141100-jdk8-ol87:owls-141100-jdk8-ol87;latest",
            "owls-122140-jdk8-ol91;Oracle:weblogic-122140-jdk8-ol91:owls-122140-jdk8-ol91;latest",
            "owls-122140-jdk8-ol87;Oracle:weblogic-122140-jdk8-ol87:owls-122140-jdk8-ol87;latest",             
            "owls-122140-jdk8-ol76;Oracle:weblogic-122140-jdk8-ol76:owls-122140-jdk8-ol7;latest",
            "owls-141100-jdk8-ol76;Oracle:weblogic-141100-jdk8-ol76:owls-141100-jdk8-ol7;latest",
            "owls-141100-jdk11-ol76;Oracle:weblogic-141100-jdk11-ol76:owls-141100-jdk11-ol7;latest",
            "owls-122140-jdk8-rhel76;Oracle:weblogic-122140-jdk8-rhel76:owls-122140-jdk8-rhel76;latest",
            "owls-141100-jdk8-rhel76;Oracle:weblogic-141100-jdk8-rhel76:owls-141100-jdk8-rhel76;latest",
            "owls-141100-jdk11-rhel76;Oracle:weblogic-141100-jdk11-rhel76:owls-141100-jdk11-rhel76;latest"
          ]
    steps:
      - name: Checkout ${{env.repoOwner}}/${{env.repoName}}
        uses: actions/checkout@v2
        with:
          repository: ${{env.repoOwner}}/${{env.repoName}}
          path: ${{env.repoName}}
      - name: Download artifact for deployment
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.preflight.outputs.artifactName }}
      - uses: azure/login@v1
        id: azure-login
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Get Image SKU
        id: image-sku
        run: |
          imageUrn="${{ matrix.images }}"
          sku=${imageUrn%%;*}
          echo "sku=${sku}" >> $GITHUB_ENV
          echo ${resourceGroupPrefix}
          resourceGroup=$(echo "${resourceGroupPrefix}-${sku}" | sed "s/_//g")
          echo "resourceGroup=${resourceGroup}" >> $GITHUB_ENV
      - name: Create Resource Group
        id: create-resource-group
        run: |
            echo "create resource group" $resourceGroup
            az group create --verbose --name $resourceGroup --location ${location}

      - name: Prepare deployed parameters and test script
        id: prepare-deployed-parameters-and-test-script
        run: |
          imageUrn="${{ matrix.images }}"

          sed -i "s/#adminPasswordOrKey#/$wlsPassword/g" \
          ${{ env.offerPath }}/test/scripts/verify-wls-path.sh

          echo "Generate deployment parameters..."
          bash ${offerPath}/test/scripts/gen-parameters-deploy.sh <<< \
            "${offerPath}/test/scripts/parameters-test.json \
            $location \
            $wlsPassword \
            $wlsDomainName \
            $wlsUserName \
            $wlsPassword \
            $managedServerPrefix \
            $maxDynamicClusterSize \
            $dynamicClusterSize \
            $adminVMName \
            $imageUrn \
            $testbranchName \
            $GITHUB_REPOSITORY"

      - name: Accept Image Terms
        id: accept-terms
        run: |
            echo "accept terms for " "${{ matrix.images }}"
            rawUrn="${{ matrix.images }}"
            publisherAndName=$(echo ${rawUrn} | grep -o ";.*:" | sed "s/;//g")
            imageVersion=${rawUrn##*;}
            az vm image terms accept --urn ${publisherAndName}${sku}:${imageVersion}

      - name: Deploy WebLogic Server Dynamic Cluster Domain offer
        id: deploy-wls-dycluster
        run: |
            artifactName=${{ needs.preflight.outputs.artifactName }}
            echo "artifactName=${{ needs.preflight.outputs.artifactName }}" >> $GITHUB_ENV
            
            az deployment group create \
              --verbose \
              --resource-group $resourceGroup \
              --name wls-dycluster-node \
              --parameters @${offerPath}/test/scripts/parameters-test.json \
              --template-file ${artifactName}/mainTemplate.json

      - name: Verify Network Security Group
        id: verify-nsg
        run: |
            echo "query nsg name, will exit with error if nsg does not exist."
            az network nsg show -g $resourceGroup -n ${nsg} --query "name"

      - name: Get IP of build machine
        id: get-ip-address
        run: |
          myIP=$(dig @ns1.google.com TXT o-o.myaddr.l.google.com +short | tr -d "\"")
          echo "myIP=${myIP}" >> $GITHUB_ENV

      - name: Add ip address to security rule to access the wls machine
        id: add-ip-to-security-rule
        run: |
            echo "query existing source address prefixes"
            attempt=0
            toCreateRule101=false
            while [[ -z `az network nsg show -g $resourceGroup -n ${nsg} | grep "NRMS-Rule-101"` && $attempt -le 5 ]]
            do
              if [ $attempt -eq 5 ]; then
                toCreateRule101=true
              fi
              echo "network security group rule NRMS-Rule-101 is not ready"
              sleep 1m
              attempt=$((attempt + 1))
            done
            if [ $toCreateRule101 == true ]; then
              az network nsg rule create --name NRMS-Rule-101 \
                           --nsg-name ${nsg} \
                           --priority 101 \
                           --resource-group $resourceGroup \
                           --access Allow \
                           --destination-address-prefixes "*" \
                           --destination-port-ranges 22 43 ${adminConsolePort} \
                           --direction Inbound \
                           --protocol Tcp \
                           --source-address-prefixes $myIP
            else
              sourceAddressPrefixes=$(az network nsg rule show \
                --resource-group $resourceGroup \
                --nsg-name ${nsg} \
                --name NRMS-Rule-101 \
                --query "sourceAddressPrefixes")
              echo "IP of this machine: " ${myIP}
              sourceAddressPrefixes=$(echo ${myIP} ${sourceAddressPrefixes} | \
                sed 's/,/ /g; s/\[//g; s/\]//g; s/"//g')
              echo ${sourceAddressPrefixes}
              az network nsg rule update \
                --resource-group $resourceGroup \
                --nsg-name ${nsg} \
                --name NRMS-Rule-101 \
                --source-address-prefixes $sourceAddressPrefixes \
                --destination-port-ranges 443 22 ${adminConsolePort}
            fi
      - name: Restart wls VM
        id: restart-wls-wm
        run: |
            echo "restart vm to make sure security rule work."
            az vm restart --force --no-wait -g $resourceGroup -n $adminVMName
            echo "Wait for few minutes to restart"
            sleep 3m

      - name: Query public IP of AdminServer VM
        id: query-wls-admin-ip
        run: |
            echo "query public ip"
            publicIP=$(az vm show \
              --resource-group $resourceGroup \
              --name $adminVMName -d \
              --query publicIps -o tsv)
            echo "##[set-output name=publicIP;]${publicIP}"
            
      - name: Create environment variable for AdminServer IP
        id: env-admin-ip
        run: echo "wlsPublicIP=${{steps.query-wls-admin-ip.outputs.publicIP}}" >> $GITHUB_ENV

      - name: Query public IP of managedServerVM1
        id: query-wls-managed-ip
        run: |
            echo "query public ip"
            publicIP=$(az vm show \
              --resource-group $resourceGroup \
              --name $managedServerVM -d \
              --query publicIps -o tsv)
            echo "##[set-output name=publicIP;]${publicIP}"
      - name: Create environment variable for managedServerVM1 IP
        id: env-managedserver-vm1-ip
        run: echo "ms1PublicIP=${{steps.query-wls-managed-ip.outputs.publicIP}}" >> $GITHUB_ENV

      # Fix failure that caused by remote server closed.
      - name: Restart remote SSH agent
        run: |
            echo "Restart remote SSH agent"
            az vm user reset-ssh \
              --resource-group $resourceGroup \
              --name ${{ env.adminVMName }}
            sleep 1m

      - name: Verify wls admin services
        id: veriy-admin-service
        run: |
          echo "wait for port 22"
          timeout 6m sh -c 'until nc -zv $0 $1; do echo "nc rc: $?"; sleep 5; done' ${wlsPublicIP} 22
          echo "Verifying WebLogic services at admin server"
          sshpass -p ${wlsPassword} -v ssh -p 22 -o StrictHostKeyChecking=no -o TCPKeepAlive=yes -o ServerAliveCountMax=20 -o ServerAliveInterval=15 -o ConnectTimeout=100 -v -tt weblogic@${wlsPublicIP} 'bash -s' < ${offerPath}/test/scripts/verify-services.sh $wlsAdminServices

      # Fix failure that caused by remote server closed.
      - name: Restart remote SSH agent
        run: |
            echo "Restart remote SSH agent"
            az vm user reset-ssh \
              --resource-group $resourceGroup \
              --name ${{ env.adminVMName }}
            sleep 1m

      - name: Verify wls managed server services
        id: veriy-msservice
        run: |
          echo "wait for port 22"
          timeout 6m sh -c 'until nc -zv $0 $1; do echo "nc rc: $?"; sleep 5; done' ${wlsPublicIP} 22
          echo "Verifying WebLogic services at managed server"
          sshpass -p ${wlsPassword} -v ssh -p 22 -o StrictHostKeyChecking=no -o TCPKeepAlive=yes -o ServerAliveCountMax=20 -o ServerAliveInterval=15 -o ConnectTimeout=100 -v -tt weblogic@${ms1PublicIP} 'bash -s' < ${offerPath}/test/scripts/verify-services.sh $wlsMsServices

      - name: Verify WebLogic Server Access
        id: verify-wls-access
        run: |
          echo "Verifying Weblogic Server Access"
          bash ${offerPath}/test/scripts/verify-wls-access.sh <<< "$wlsPublicIP ${adminConsolePort} $wlsUserName $wlsPassword $managedServers"

      - name: Verify WebLogic Managed Server LifeCycle check
        id: verify-server-lifecycle
        run: |
          echo "wait for port 22"
          echo "Verifying Weblogic managed server lifecycle"
          bash ${offerPath}/test/scripts/verify-servers-lifecycle.sh <<< "$wlsUserName $wlsPassword ${wlsPublicIP} ${adminConsolePort} ${managedServers}"     

      - name: Delete Resource Group
        id: delete-resource-group
        if: always()
        run: |
            echo "delete... " $resourceGroup
            az group delete --yes --no-wait --verbose --name $resourceGroup

  cleanup-github-resource:
    needs: deploy-weblogic-cluster
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ${{env.repoName}}
        uses: actions/checkout@v2
        with:
          repository: ${{ env.repoOwner }}/${{env.repoName}}
          path: ${{env.repoName}}
      - name: Delete testing branch
        run: |
          cd ${{env.repoName}}
          git push https://$gitToken@github.com/${GITHUB_REPOSITORY}.git -f --delete $testbranchName

  cleanup-az-resource:
    if: always()
    needs: deploy-weblogic-cluster
    runs-on: ubuntu-latest
    steps:
      - uses: azure/login@v1
        id: azure-login
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Delete DB Resource Group
        id: delete-db-resource-group
        run: |
            echo "delete... " $resourceGroup
            az group delete --yes --no-wait --verbose --name ${{ env.resourceGroupForDependency }}
  
  summary:
    needs: deploy-weblogic-cluster
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: summarize jobs
        if: ${{ github.repository_owner == 'wls-eng' }}
        run: |
            workflow_jobs=$(curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${{ github.run_id }}/jobs)
            critical_job_num=$(echo $workflow_jobs | jq '.jobs | map(select(.name|test("^deploy-weblogic-cluster."))) | length')
            echo "$critical_job_num"
            succeed_critical_job_num=$(echo $workflow_jobs | jq '.jobs | map(select(.conclusion=="success") | select(.name|test("^deploy-weblogic-cluster."))) | length')
            echo "$succeed_critical_job_num"
            failed_job_num="$(($critical_job_num-$succeed_critical_job_num))"
            echo $failed_job_num
            if (($failed_job_num >= 2));then
                echo "too many jobs failed, send notification to Teams"
                curl ${{ secrets.MSTEAMS_WEBHOOK }} \
                -H 'Content-Type: application/json' \
                --data-binary @- << EOF
                {
                "@context":"http://schema.org/extensions",
                "@type":"MessageCard",
                "text":"$failed_job_num jobs failed in Dynamic Cluster Offer's workflow, please take a look at: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${{ github.run_id }}"
                }
            EOF
            fi
